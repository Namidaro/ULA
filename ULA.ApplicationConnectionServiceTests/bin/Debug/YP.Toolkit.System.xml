<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YP.Toolkit.System</name>
    </assembly>
    <members>
        <member name="T:YP.Toolkit.System.Collections.IPriorityQueue`2">
            <summary>
            Exposes a priority queue data structure.
            </summary>
            <typeparam name="TValue">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TKey">Specifies the type of priority in the queue.</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Collections.IPriorityQueue`2.Count">
            <summary>
            Gets the number of elements contained in the queue.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Collections.IPriorityQueue`2.IsEmpty">
            <summary>
            Gets whether the queue is empty.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Adds the key/value pair to the priority queue.
            </summary>
            <param name="priority">The priority of the item to be added.</param>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.TryDequeue(`1@)">
            <summary>,
            Attempts to remove and return the next prioritized item in the queue.
            </summary>
            <param name="value">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.TryPeek(`1@)">
            <summary>
            Attempts to return the next prioritized item in the queue.
            </summary>
            <param name="value">
            When this method returns, if the operation was successful, result contains the object.
            The queue was not modified by the operation.
            </param>
            <returns>
            true if an element was returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.Contains(`1)">
            <summary>
            Determines whether the specified item in the sequence.
            </summary>
            <returns>
            true, if the source sequence contains an element with a specified value, otherwise - false.
            </returns>
            <param name="value">The value what have to found in the sequence.</param>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.Contains(`0,`1)">
            <summary>
            Determines whether the specified item in the sequence.
            </summary>
            <param name="priority">The priority of the item to be searched.</param>
            <param name="value">The value what have to found in the sequence.</param>
            <returns>true, if the source sequence contains an element with a specified value, otherwise - false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.Contains(`0,`1,System.Collections.Generic.IComparer{`1})">
            <summary>
            Determines whether the specified item in the sequence.
            </summary>
            <param name="priority">The priority of the item to be searched.</param>
            <param name="value">The value what have to found in the sequence.</param>
            <param name="comparer">Equality comparer is used to compare values​​.</param>
            <returns>true, if the source sequence contains an element with a specified value, otherwise - false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.IPriorityQueue`2.Clear">
            <summary>
            Empties the queue
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Collections.PriorityQueue`2">
            <summary>
            Provides a priority queue functionality
            </summary>
            <typeparam name="TValue">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TKey">Specifies the type of priority in the queue.</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Collections.PriorityQueue`2.Count">
            <summary>
            Gets the number of elements contained in the queue.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Collections.PriorityQueue`2.IsEmpty">
            <summary>
            Gets whether the queue is empty.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.#ctor">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Collections.PriorityQueue`2"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Adds the key/value pair to the priority queue.
            </summary>
            <param name="priority">The priority of the item to be added.</param>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.TryDequeue(`1@)">
            <summary>,
            Attempts to remove and return the next prioritized item in the queue.
            </summary>
            <param name="value">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.TryPeek(`1@)">
            <summary>
            Attempts to return the next prioritized item in the queue.
            </summary>
            <param name="value">
            When this method returns, if the operation was successful, result contains the object.
            The queue was not modified by the operation.
            </param>
            <returns>
            true if an element was returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.Contains(`1)">
            <summary>
            Determines whether the specified item in the sequence.
            </summary>
            <returns>
            true, if the source sequence contains an element with a specified value, otherwise - false.
            </returns>
            <param name="value">The value what have to found in the sequence.</param>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.Contains(`0,`1)">
            <summary>
            Determines whether the specified item in the sequence.
            </summary>
            <param name="priority">The priority of the item to be searched.</param>
            <param name="value">The value what have to found in the sequence.</param>
            <returns>true, if the source sequence contains an element with a specified value, otherwise - false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.Contains(`0,`1,System.Collections.Generic.IComparer{`1})">
            <summary>
            Determines whether the specified item in the sequence.
            </summary>
            <param name="priority">The priority of the item to be searched.</param>
            <param name="value">The value what have to found in the sequence.</param>
            <param name="comparer">Equality comparer is used to compare values​​.</param>
            <returns>true, if the source sequence contains an element with a specified value, otherwise - false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.Clear">
            <summary>
            Empties the queue
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Collections.PriorityQueue`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Collections.PriorityQueue`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized with the SyncRoot.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.</summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Collections.PriorityQueue`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.ExceptionBase">
            <summary>
            Represnets base application functionality of an exception
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.ExceptionBase.#ctor">
            <summary>
            Initializes an instance of <see cref="T:YP.Toolkit.System.Exceptions.ExceptionBase"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.ExceptionBase.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:YP.Toolkit.System.Exceptions.ExceptionBase"/>
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="P:YP.Toolkit.System.Exceptions.ExceptionBase.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.ExceptionBase.SetMessage(System.String)">
            <summary>
            Sets exception message
            </summary>
            <param name="message">The message to set</param>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.ExceptionBase.SetInnerException(System.Exception)">
            <summary>
            Sets an inner exception
            </summary>
            <param name="innerException">The inner exception to set</param>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.MetadataAlreadyExistsException">
            <summary>
            Represents metadata exception that will occure when the metadata already exists in configuration container 
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.MetadataBuilderException">
            <summary>
            Represents metadata builder exception
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.MetadataException">
            <summary>
            Represents metadata exception
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.MetadataRegistrationException">
            <summary>
            Represents metadata registration exception
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.SerializationException">
            <summary>
            Represents serialization exception
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.SpecificationException">
            <summary>
            Represents specification specific exception
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.StrongTypeReflectionException">
            <summary>
            Represents a strong type reflection exception
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Exceptions.CombinedException">
            <summary>
            	Generic exception for combining several other exceptions
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.CombinedException.#ctor(System.String,System.Exception[])">
            <summary>
            	Initializes a new instance of the <see cref = "T:YP.Toolkit.System.Exceptions.CombinedException" /> class.
            </summary>
            <param name = "message">The message.</param>
            <param name = "innerExceptions">The inner exceptions.</param>
        </member>
        <member name="P:YP.Toolkit.System.Exceptions.CombinedException.InnerExceptions">
            <summary>
            	Gets the inner exceptions.
            </summary>
            <value>The inner exceptions.</value>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.CombinedException.Combine(System.String,System.Exception[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerExceptions"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.Exceptions.CombinedException.Combine(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Combines the specified exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExceptions">The inner exceptions.</param>
            <returns></returns>
        </member>
        <member name="T:YP.Toolkit.System.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:YP.Toolkit.System.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YP.Toolkit.System.LocalizationRequiredAttribute"/> class with
            <see cref="P:YP.Toolkit.System.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YP.Toolkit.System.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="P:YP.Toolkit.System.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:YP.Toolkit.System.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:YP.Toolkit.System.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="T:YP.Toolkit.System.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:YP.Toolkit.System.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:YP.Toolkit.System.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:YP.Toolkit.System.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="!:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() => Property)</c></item>
             <item><c>NotifyChanged((VM x) => x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:YP.Toolkit.System.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:YP.Toolkit.System.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:YP.Toolkit.System.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:YP.Toolkit.System.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
            However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality
            {
            }
            
            class UsesNoEquality
            {
              public void Test()
              {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
            
                if (ca1 != null) // OK
                {
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:YP.Toolkit.System.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked with 
            the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:YP.Toolkit.System.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:YP.Toolkit.System.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:YP.Toolkit.System.MeansImplicitUseAttribute"/> or <see cref="T:YP.Toolkit.System.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             The same as <see cref="!:System.Diagnostics.Contracts.PureAttribute"/>
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:YP.Toolkit.System.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions">
            <summary>Extension methods for BlockingCollection.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.GetConsumingPartitioner``1(System.Collections.Concurrent.BlockingCollection{``0})">
            <summary>
            Gets a partitioner for a BlockingCollection that consumes and yields the contents of the BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of data in the collection.</typeparam>
            <param name="collection">The collection for which to create a partitioner.</param>
            <returns>A partitioner that completely consumes and enumerates the contents of the collection.</returns>
            <remarks>
            Using this partitioner with a Parallel.ForEach loop or with PLINQ eliminates the need for those
            constructs to do any additional locking.  The only synchronization in place is that used by the
            BlockingCollection internally.
            </remarks>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.BlockingCollectionPartitioner`1">
            <summary>Provides a partitioner that consumes a blocking collection and yields its contents.</summary>
            <typeparam name="T">Specifies the type of data in the collection.</typeparam>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.BlockingCollectionPartitioner`1._collection">
            <summary>The target collection.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.#ctor(System.Collections.Concurrent.BlockingCollection{`0})">
            <summary>Initializes the partitioner.</summary>
            <param name="collection">The collection to be enumerated and consumed.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.SupportsDynamicPartitions">
            <summary>Gets whether additional partitions can be created dynamically.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.GetPartitions(System.Int32)">
            <summary>Partitions the underlying collection into the given number of partitions.</summary>
            <param name="partitionCount">The number of partitions to create.</param>
            <returns>A list containing partitionCount enumerators.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.BlockingCollectionPartitioner`1.GetDynamicPartitions">
            <summary>
            Creates an object that can partition the underlying collection into a variable number of partitions.
            </summary>
            <returns>An object that can create partitions over the underlying data source.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.AddFromEnumerable``1(System.Collections.Concurrent.BlockingCollection{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>Adds the contents of an enumerable to the BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="target">The target BlockingCollection to be augmented.</param>
            <param name="source">The source enumerable containing the data to be added.</param>
            <param name="completeAddingWhenDone">
            Whether to mark the target BlockingCollection as complete for adding when 
            all elements of the source enumerable have been transfered.
            </param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.AddFromObservable``1(System.Collections.Concurrent.BlockingCollection{``0},System.IObservable{``0},System.Boolean)">
            <summary>Adds the contents of an observable to the BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="target">The target BlockingCollection to be augmented.</param>
            <param name="source">The source observable containing the data to be added.</param>
            <param name="completeAddingWhenDone">
            Whether to mark the target BlockingCollection as complete for adding when 
            all elements of the source observable have been transfered.
            </param>
            <returns>An IDisposable that may be used to cancel the transfer.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.ToProducerConsumerCollection``1(System.Collections.Concurrent.BlockingCollection{``0})">
            <summary>Creates an IProducerConsumerCollection-facade for a BlockingCollection instance.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The BlockingCollection.</param>
            <returns>
            An IProducerConsumerCollection that wraps the provided BlockingCollection.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.ToProducerConsumerCollection``1(System.Collections.Concurrent.BlockingCollection{``0},System.Int32)">
            <summary>Creates an IProducerConsumerCollection-facade for a BlockingCollection instance.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The BlockingCollection.</param>
            <param name="millisecondsTimeout">-1 for infinite blocking add and take operations. 0 for non-blocking, 1 or greater for blocking with timeout.</param>
            <returns>An IProducerConsumerCollection that wraps the provided BlockingCollection.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.ToProducerConsumerCollection``1(System.Collections.Concurrent.BlockingCollection{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>Creates an IProducerConsumerCollection-facade for a BlockingCollection instance.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
            <param name="collection">The BlockingCollection.</param>
            <param name="millisecondsTimeout">-1 for infinite blocking add and take operations. 0 for non-blocking, 1 or greater for blocking with timeout.</param>
            <param name="cancellationToken">The CancellationToken to use for any blocking operations.</param>
            <returns>An IProducerConsumerCollection that wraps the provided BlockingCollection.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.BlockingCollectionExtensions.ProducerConsumerWrapper`1">
            <summary>Provides a producer-consumer collection facade for a BlockingCollection.</summary>
            <typeparam name="T">Specifies the type of the elements in the collection.</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CancellationTokenExtensions">
            <summary>
            Extension methods for CancellationToken.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CancellationTokenExtensions.CancelAndThrow(System.Threading.CancellationTokenSource)">
            <summary>
            Cancels a CancellationTokenSource and throws a corresponding OperationCanceledException.
            </summary>
            <param name="source">The source to be canceled.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CancellationTokenExtensions.CreateLinkedSource(System.Threading.CancellationToken)">
            <summary>
            Creates a CancellationTokenSource that will be canceled when the specified token has cancellation requested.
            </summary>
            <param name="token">The token.</param>
            <returns>The created CancellationTokenSource.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CompletedTask">
            <summary>
            Provides access to an already completed task.
            </summary>
            <remarks>A completed task can be useful for using ContinueWith overloads where there aren't StartNew equivalents.</remarks>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CompletedTask.Default">
            <summary>Gets a completed Task.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CompletedTask`1">
            <summary>
            Provides access to an already completed task.
            </summary>
            <remarks>A completed task can be useful for using ContinueWith overloads where there aren't StartNew equivalents.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CompletedTask`1.#cctor">
            <summary>Initializes a Task.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CompletedTask`1.Default">
            <summary>Gets a completed Task.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase">
            <summary>
            Base stream class that implements all of Stream's abstract members.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.CanRead">
            <summary>
            Determines whether data can be read from the stream.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.CanWrite">
            <summary>
            Determines whether data can be written to the stream.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.CanSeek">
            <summary>
            Determines whether the stream can be seeked.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.Flush">
            <summary>
            Flushes the contents of the stream to the underlying storage.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.Length">
            <summary>
            Gets the length of the stream.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.Position">
            <summary>
            Gets or sets the current position of the stream.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current
            stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When Read returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced
            by the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read
            from the current stream.
            </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the
            number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">
            A value of type System.IO.SeekOrigin indicating the reference point used
            to obtain the new position.
            </param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AbstractStreamBase.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream.
            </summary>
            <param name="buffer">An array of bytes. Write copies count bytes from buffer to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ActionCountdownEvent">
            <summary>
            Runs an action when the CountdownEvent reaches zero.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ActionCountdownEvent.#ctor(System.Int32,System.Action)">
            <summary>
            Initializes the ActionCountdownEvent.
            </summary>
            <param name="initialCount">The number of signals required to set the CountdownEvent.</param>
            <param name="action">The delegate to be invoked when the count reaches zero.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ActionCountdownEvent.AddCount">
            <summary>
            Increments the current count by one.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ActionCountdownEvent.Signal">
            <summary>
            Registers a signal with the event, decrementing its count.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ActionCountdownEvent.Dispose">
            <summary>
            Releases all resources used by the current instance.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ActionCountdownEvent.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance.
            </summary>
            <param name="disposing">
            true if called because the object is being disposed; otherwise, false.
            </param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier">
            <summary>
            Provides an asynchronous barrier.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier._participantCount">
            <summary>
            The number of participants in the barrier.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier._currentSignalTask">
            <summary>
            The task used to signal completion of the current round.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier._remainingParticipants">
            <summary>
            The number of participants remaining to arrive for this round.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier.#ctor(System.Int32)">
            <summary>
            Initializes the BarrierAsync with the specified number of participants.
            </summary>
            <param name="participantCount">The number of participants in the barrier.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier.ParticipantCount">
            <summary>
            Gets the participant count.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier.RemainingCount">
            <summary>
            Gets the number of participants still not yet arrived in this round.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncBarrier.SignalAndWait">
            <summary>
            Signals that a participant has arrived.
            </summary>
            <returns>A Task that will be signaled when the current round completes.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCacheDebugView`2">
            <summary>
            Debugger type proxy for AsyncCache.
            </summary>
            <typeparam name="TKey">Specifies the type of the cache's keys.</typeparam>
            <typeparam name="TValue">Specifies the type of the cache's values.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCacheDebugView`2.#ctor(YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache{`0,`1})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCacheDebugView`2"/>
            </summary>
            <param name="asyncCache">An instance of asynchronous cache</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCacheDebugView`2.Values">
            <summary>
            Gets a collection of values
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2">
            <summary>
            Caches asynchronously retrieved data.
            </summary>
            <typeparam name="TKey">Specifies the type of the cache's keys.</typeparam>
            <typeparam name="TValue">Specifies the type of the cache's values.</typeparam>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2._valueFactory">
            <summary>
            The factory to use to create tasks.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2._map">
            <summary>
            The dictionary to store all of the tasks.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Initializes the cache.
            </summary>
            <param name="valueFactory">A factory for producing the cache's values.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.GetValue(`0)">
            <summary>
            Gets a Task to retrieve the value for the specified key.
            </summary>
            <param name="key">The key whose value should be retrieved.</param>
            <returns>A Task for the value of the specified key.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.SetValue(`0,`1)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key whose value should be set.</param>
            <param name="value">The value to which the key should be set.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.SetValue(`0,System.Threading.Tasks.Task{`1})">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key whose value should be set.</param>
            <param name="value">The value to which the key should be set.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.Item(`0)">
            <summary>
            Gets a Task to retrieve the value for the specified key.
            </summary>
            <param name="key">The key whose value should be retrieved.</param>
            <returns>A Task for the value of the specified key.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.Clear">
            <summary>
            Empties the cache.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.Count">
            <summary>
            Gets the number of items in the cache.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.GetEnumerator">
            <summary>
            Gets an enumerator for the contents of the cache.
            </summary>
            <returns>An enumerator for the contents of the cache.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the contents of the cache.
            </summary>
            <returns>An enumerator for the contents of the cache.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Adds or overwrites the specified entry in the cache.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Determines whether the cache contains the specified key.
            </summary>
            <param name="item">The item contained the key to be searched for.</param>
            <returns>True if the cache contains the key; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}}[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.Generic.ICollection{T} to an
            System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.ICollection{T}. The System.Array must
            have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#IsReadOnly">
            <summary>
            Gets whether the cache is read-only.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCache`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Threading#Tasks#Task{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Removes the specified key from the cache.
            </summary>
            <param name="item">The item containing the key to be removed.</param>
            <returns>True if the item could be removed; otherwise, false.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1">
            <summary>
            Asynchronously invokes a handler for every posted item.
            </summary>
            <typeparam name="T">Specifies the type of data processed by the instance.</typeparam>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1._queue">
            <summary>
            A queue that stores the posted data.  Also serves as the syncObj for protected instance state.
            A ConcurrentQueue is used to enable lock-free dequeues while running with a single consumer task.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1._handler">
            <summary>
            The delegate to invoke for every element.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1._maxItemsPerTask">
            <summary>
            The maximum number of items that should be processed by an individual task.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1._tf">
            <summary>
            The TaskFactory to use to launch new tasks.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1._parallelOptions">
            <summary>
            The options to use for parallel processing of data.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1._processingCount">
            <summary>
            Whether a processing task has been scheduled.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.#ctor(System.Action{`0},System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with an action to execute for each element.
            </summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with a function to execute for each element.  The function returns an Task 
            that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The function to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.#ctor(System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            General initialization of the AsyncCall.  Another constructor must initialize the delegate.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.Post(`0)">
            <summary>
            Post an item for processing.
            </summary>
            <param name="item">The item to be processed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.GetItemsToProcess">
            <summary>
            Gets an enumerable that yields the items to be processed at this time.
            </summary>
            <returns>An enumerable of items.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.ProcessItemsActionTaskBody">
            <summary>
            Used as the body of an action task to process items in the queue.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall`1.ProcessItemFunctionTaskBody(System.Object)">
            <summary>
            Used as the body of a function task to process items in the queue.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall">
            <summary>
            Provides static factory methods for creating AsyncCall(Of T) instances.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall.Create``1(System.Action{``0},System.Int32,System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with an action to execute for each element.
            </summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall.Create``1(System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the AsyncCall with a function to execute for each element.  The function returns an Task 
            that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="functionHandler">The function to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="scheduler">The scheduler to use.  If null, the default scheduler is used.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall.CreateInTargetAppDomain``1(System.AppDomain,System.Action{``0},System.Int32,System.Int32)">
            <summary>
            Initializes the AsyncCall in the specified AppDomain with an action to execute for each element.
            </summary>
            <param name="actionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
            <param name="maxItemsPerTask">The maximum number of items to be processed per task.  If not specified, Int32.MaxValue is used.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncCall.CreateInTargetAppDomain``1(System.AppDomain,System.Func{``0,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Initializes the AsyncCall in the specified AppDomain with a function to execute for each element.  
            The function returns an Task that represents the asynchronous completion of that element's processing.
            </summary>
            <param name="targetDomain">An instance of current app domain</param>
            <param name="functionHandler">The action to run for every posted item.</param>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism to use.  If not specified, 1 is used for serial execution.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1">
            <summary>
            Provides an asynchronous producer/consumer collection.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1._semaphore">
            <summary>
            Asynchronous semaphore used to keep track of asynchronous work.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1._collection">
            <summary>
            The data stored in the collection.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1.#ctor">
            <summary>
            Initializes the asynchronous producer/consumer collection to store data in a first-in-first-out (FIFO) order.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Initializes the asynchronous producer/consumer collection.
            </summary>
            <param name="collection">The underlying collection to use to store data.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1.Add(`0)">
            <summary>
            Adds an element to the collection.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1.Take">
            <summary>
            Takes an element from the collection asynchronously.
            </summary>
            <returns>A Task that represents the element removed from the collection.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncProducerConsumerCollection`1.Dispose">
            <summary>
            Disposes of the collection.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter">
            <summary>
            Provides for asynchronous exclusive and concurrent execution support.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter._lock">
            <summary>
            The lock that protects all shared state in this instance.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter._waitingConcurrent">
            <summary>
            The queue of concurrent readers waiting to execute.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter._waitingExclusive">
            <summary>
            The queue of exclusive writers waiting to execute.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter._currentConcurrent">
            <summary>
            The number of concurrent readers currently executing.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter._currentlyExclusive">
            <summary>
            The number of exclusive writers currently executing.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter._factory">
            <summary>
            The non-generic factory to use for task creation.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.#ctor">
            <summary>
            Initializes the ReaderWriterAsync.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.#ctor(System.Threading.Tasks.TaskFactory)">
            <summary>
            Initializes the ReaderWriterAsync with the specified TaskFactory for us in creating all tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create all tasks.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.WaitingExclusive">
            <summary>
            Gets the number of exclusive operations currently queued.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.WaitingConcurrent">
            <summary>
            Gets the number of concurrent operations currently queued.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.CurrentConcurrent">
            <summary>
            Gets the number of concurrent operations currently executing.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.CurrentlyExclusive">
            <summary>
            Gets whether an exclusive operation is currently executing.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.QueueExclusiveWriter(System.Action)">
            <summary>
            Queues an exclusive writer action to the ReaderWriterAsync.
            </summary>
            <param name="action">The action to be executed exclusively.</param>
            <returns>A Task that represents the execution of the provided action.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.QueueExclusiveWriter``1(System.Func{``0})">
            <summary>
            Queues an exclusive writer function to the ReaderWriterAsync.
            </summary>
            <param name="function">The function to be executed exclusively.</param>
            <returns>A Task that represents the execution of the provided function.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.QueueConcurrentReader(System.Action)">
            <summary>
            Queues a concurrent reader action to the ReaderWriterAsync.
            </summary>
            <param name="action">The action to be executed concurrently.</param>
            <returns>A Task that represents the execution of the provided action.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.QueueConcurrentReader``1(System.Func{``0})">
            <summary>
            Queues a concurrent reader function to the ReaderWriterAsync.
            </summary>
            <param name="function">The function to be executed concurrently.</param>
            <returns>A Task that represents the execution of the provided function.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.RunExclusive_RequiresLock(System.Threading.Tasks.Task)">
            <summary>
            Starts the specified exclusive task.
            </summary>
            <param name="exclusive">The exclusive task to be started.</param>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.RunConcurrent_RequiresLock(System.Threading.Tasks.Task)">
            <summary>
            Starts the specified concurrent task.
            </summary>
            <param name="concurrent">The exclusive task to be started.</param>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.RunConcurrent_RequiresLock">
            <summary>
            Starts all queued concurrent tasks.
            </summary>
            <remarks>This must only be executed while holding the instance's lock.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.FinishConcurrentReader">
            <summary>
            Completes the processing of a concurrent reader.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncReaderWriter.FinishExclusiveWriter">
            <summary>
            Completes the processing of an exclusive writer.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore">
            <summary>
            Provides an asynchronous semaphore.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore._currentCount">
            <summary>
            The current count.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore._maxCount">
            <summary>
            The maximum count. If _maxCount isn't positive, the instance has been disposed.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore._waitingTasks">
            <summary>
            Tasks waiting to be completed when the semaphore has count available.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.#ctor">
            <summary>
            Initializes the SemaphoreAsync with a count of zero and a maximum count of Int32.MaxValue.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.#ctor(System.Int32)">
            <summary>
            Initializes the SemaphoreAsync with the specified count and a maximum count of Int32.MaxValue.
            </summary>
            <param name="initialCount">The initial count to use as the current count.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the SemaphoreAsync with the specified counts.
            </summary>
            <param name="initialCount">The initial count to use as the current count.</param>
            <param name="maxCount">The maximum count allowed.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.CurrentCount">
            <summary>
            Gets the current count.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.MaximumCount">
            <summary>
            Gets the maximum count.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.WaitingCount">
            <summary>
            Gets the number of operations currently waiting on the semaphore.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.WaitAsync">
            <summary>
            Waits for a unit to be available in the semaphore.
            </summary>
            <returns>A Task that will be completed when a unit is available and this Wait operation succeeds.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.Queue(System.Action)">
            <summary>
            Queues an action that will be executed when space is available
            in the semaphore.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>
            A Task that represents the execution of the action.
            </returns>
            <remarks>
            Release does not need to be called for this action, as it will be handled implicitly
            by the Queue method.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.Queue``1(System.Func{``0})">
            <summary>
            Queues a function that will be executed when space is available
            in the semaphore.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>
            A Task that represents the execution of the function.
            </returns>
            <remarks>
            Release does not need to be called for this function, as it will be handled implicitly
            by the Queue method.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.Release">
            <summary>
            Releases a unit of work to the semaphore.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.AsyncCoordination.AsyncSemaphore.Dispose">
            <summary>
            Releases the resources used by the semaphore.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2">
            <summary>
            Provides a thread-safe priority queue data structure.
            </summary>
            <typeparam name="TKey">Specifies the type of keys used to prioritize values.</typeparam>
            <typeparam name="TValue">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap">
            <summary>
            Implements a binary heap that prioritizes smaller values.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.#ctor">
            <summary>
            Initializes an empty heap.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.#ctor(YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue{`0,`1}.MinBinaryHeap)">
            <summary>
            Initializes a heap as a copy of another heap instance.
            </summary>
            <param name="heapToCopy">The heap to copy.</param>
            <remarks>Key/Value values are not deep cloned.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.Clear">
            <summary>
            Empties the heap.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.Insert(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the heap.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.Peek">
            <summary>
            Returns the entry at the top of the heap.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.Remove">
            <summary>
            Removes the entry at the top of the heap.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.Count">
            <summary>
            Gets the number of objects stored in the heap.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.MinBinaryHeap.Items">
            <summary>
            Gets a collection of items
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.#ctor">
            <summary>
            Initializes a new instance of the ConcurrentPriorityQueue class.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the ConcurrentPriorityQueue class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new ConcurrentPriorityQueue.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Adds the key/value pair to the priority queue.
            </summary>
            <param name="priority">The priority of the item to be added.</param>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.Enqueue(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the key/value pair to the priority queue.
            </summary>
            <param name="item">The key/value pair to be added to the queue.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.TryDequeue(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Attempts to remove and return the next prioritized item in the queue.
            </summary>
            <param name="result">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.TryPeek(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Attempts to return the next prioritized item in the queue.
            </summary>
            <param name="result">
            When this method returns, if the operation was successful, result contains the object.
            The queue was not modified by the operation.
            </param>
            <returns>
            true if an element was returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.Clear">
            <summary>
            Empties the queue.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.IsEmpty">
            <summary>
            Gets whether the queue is empty.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.Count">
            <summary>
            Gets the number of elements contained in the queue.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>The elements will not be copied to the array in any guaranteed order.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.ToArray">
            <summary>
            Copies the elements stored in the queue to a new array.
            </summary>
            <returns>A new array containing a snapshot of elements copied from the queue.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.System#Collections#Concurrent#IProducerConsumerCollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#TryAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Attempts to add an item in the queue.
            </summary>
            <param name="item">The key/value pair to be added.</param>
            <returns>
            true if the pair was added; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.System#Collections#Concurrent#IProducerConsumerCollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#TryTake(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Attempts to remove and return the next prioritized item in the queue.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the contents of the queue.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents of the queue. It does not
            reflect any updates to the collection after GetEnumerator was called. The enumerator is safe to
            use concurrently with reads from and writes to the queue.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.</summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized with the SyncRoot.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ConcurrentHeapPriorityQueue`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1">
            <summary>
            Provides a thread-safe object pool.
            </summary>
            <typeparam name="T">Specifies the type of the elements stored in the pool.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes an instance of the ObjectPool class.
            </summary>
            <param name="generator">The function used to create items when no items exist in the pool.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.#ctor(System.Func{`0},System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Initializes an instance of the ObjectPool class.
            </summary>
            <param name="generator">The function used to create items when no items exist in the pool.</param>
            <param name="collection">The collection used to store the elements of the pool.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.PutObject(`0)">
            <summary>
            Adds the provided item into the pool.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.GetObject">
            <summary>
            Gets an item from the pool.
            </summary>
            <returns>The removed or created item.</returns>
            <remarks>If the pool is empty, a new item will be created and returned.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.ToArrayAndClear">
            <summary>
            Clears the object pool, returning all of the data that was in the pool.
            </summary>
            <returns>An array containing all of the elements in the pool.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.TryAdd(`0)">
            <summary>
            Attempts to add the specified value to the end of the deque.
            </summary>
            <param name="item">The item to add.</param>
            <returns>true if the item could be added; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObjectPool`1.TryTake(`0@)">
            <summary>
            Attempts to remove and return an item from the collection.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, item contains the item removed. If
            no item was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the collection; otherwise, false.
            </returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1">
            <summary>
            Provides a thread-safe, concurrent collection for use with data binding.
            </summary>
            <typeparam name="T">Specifies the type of the elements in this collection.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.#ctor">
            <summary>
            Initializes an instance of the ObservableConcurrentCollection class with an underlying
            queue data structure.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Initializes an instance of the ObservableConcurrentCollection class with the specified
            collection as the underlying data structure.
            </summary>
        </member>
        <member name="E:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.CollectionChanged">
            <summary>
            Event raised when the collection changes.
            </summary>
        </member>
        <member name="E:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.PropertyChanged">
            <summary>
            Event raised when a property on the collection changes.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.TryAdd(`0)">
            <summary>Attempts to add the specified value to the end of the deque.</summary>
            <param name="item">The item to add.</param>
            <returns>true if the item could be added; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.TryTake(`0@)">
            <summary>Attempts to remove and return an item from the collection.</summary>
            <param name="item">
            When this method returns, if the operation was successful, item contains the item removed. If
            no item was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the collection; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentCollection`1.NotifyObserversOfChange">
            <summary>
            Notifies observers of CollectionChanged or PropertyChanged of an update to the dictionary.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2">
            <summary>
            Provides a thread-safe dictionary for use with data binding.
            </summary>
            <typeparam name="TKey">Specifies the type of the keys in this collection.</typeparam>
            <typeparam name="TValue">Specifies the type of the values in this collection.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.#ctor">
            <summary>
            Initializes an instance of the ObservableConcurrentDictionary class.
            </summary>
        </member>
        <member name="E:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.CollectionChanged">
            <summary>
            Event raised when the collection changes.
            </summary>
        </member>
        <member name="E:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.PropertyChanged">
            <summary>
            Event raised when a property on the collection changes.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> 
            that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>.
             The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="{T}{T}"/>
             cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.NotifyObserversOfChange">
            <summary>
            Notifies observers of CollectionChanged or PropertyChanged of an update to the dictionary.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.TryAddWithNotification(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Attempts to add an item to the dictionary, notifying observers of any changes.
            </summary>
            <param name="item">The item to be added.</param>
            <returns>Whether the add was successful.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.TryAddWithNotification(`0,`1)">
            <summary>
            Attempts to add an item to the dictionary, notifying observers of any changes.
            </summary>
            <param name="key">The key of the item to be added.</param>
            <param name="value">The value of the item to be added.</param>
            <returns>Whether the add was successful.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.TryRemoveWithNotification(`0,`1@)">
            <summary>
            Attempts to remove an item from the dictionary, notifying observers of any changes.
            </summary>
            <param name="key">The key of the item to be removed.</param>
            <param name="value">The value of the item removed.</param>
            <returns>Whether the removal was successful.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ObservableConcurrentDictionary`2.UpdateWithNotification(`0,`1)">
            <summary>
            Attempts to add or update an item in the dictionary, notifying observers of any changes.
            </summary>
            <param name="key">The key of the item to be updated.</param>
            <param name="value">The new value to set for the item.</param>
            <returns>Whether the update was successful.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline">
            <summary>
            Provides support for pipelined data processing.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline.Create``2(System.Func{``0,``1})">
            <summary>
            Creates a new pipeline, with the specified function as the sole stage.
            </summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
            <param name="func">The function used to process input data into output data.</param>
            <returns>A pipeline for converting from input data to output data.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline.Create``2(System.Func{``0,``1},System.Int32)">
            <summary>
            Creates a new pipeline, with the specified function as the sole stage.
            </summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
            <param name="func">The function used to process input data into output data.</param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
            <returns>A pipeline for converting from input data to output data.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2">
            <summary>
            Provides support for pipelined data processing.
            </summary>
            <typeparam name="TInput">Specifies the type of the input data to the pipeline.</typeparam>
            <typeparam name="TOutput">Specifies the type of the output data from this stage of the pipeline.</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.InternalPipeline`1">
            <summary>
            Helper used to add a new stage to a pipeline.
            </summary>
            <typeparam name="TNextOutput">Specifies the type of the output for the new pipeline.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.InternalPipeline`1.#ctor(YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline{`0,`1},System.Func{`1,`2},System.Int32)">
            <summary>
            Creates an instance of InternalPipeline{TNextOutput}
            </summary>
            <param name="beginningPipeline"></param>
            <param name="func"></param>
            <param name="degreeOfParallelism"></param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.InternalPipeline`1.ProcessCore(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Collections.Concurrent.BlockingCollection{`2})">
            <summary>
            Implements the core processing for a pipeline stage.
            </summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <param name="output">The collection into which to put the output.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.#ctor(System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2"/>
            </summary>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.#ctor(System.Func{`0,`1},System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2"/>
            </summary>
            <param name="func">The function used to process input data into output data.</param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.Next``1(System.Func{`1,``0})">
            <summary>
            Creates a new pipeline that combines the current pipeline with a new stage.
            </summary>
            <typeparam name="TNextOutput">Specifies the new output type of the pipeline.</typeparam>
            <param name="func">
            The function used to convert the output of the current pipeline into the new
            output of the new pipeline.
            </param>
            <returns>A new pipeline that combines the current pipeline with the new stage.</returns>
            <remarks>This overload creates a parallel pipeline stage.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.Next``1(System.Func{`1,``0},System.Int32)">
            <summary>
            Creates a new pipeline that combines the current pipeline with a new stage.
            </summary>
            <typeparam name="TNextOutput">Specifies the new output type of the pipeline.</typeparam>
            <param name="func">
            The function used to convert the output of the current pipeline into the new
            output of the new pipeline.
            </param>
            <param name="degreeOfParallelism">The concurrency level for this stage of the pipeline.</param>
            <returns>A new pipeline that combines the current pipeline with the new stage.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.Process(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Runs the pipeline and returns an enumerable over the results.
            </summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.Process(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Runs the pipeline and returns an enumerable over the results.
            </summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.ProcessNoArgValidation(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Runs the pipeline and returns an enumerable over the results.
            </summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <returns>An enumerable of the results of the pipeline.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.Pipeline`2.ProcessCore(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken,System.Collections.Concurrent.BlockingCollection{`1})">
            <summary>
            Implements the core processing for a pipeline stage.
            </summary>
            <param name="source">The source data to be processed by the pipeline.</param>
            <param name="cancellationToken">The cancellation token used to signal cancellation of the pipelining.</param>
            <param name="output">The collection into which to put the output.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionDebugView`1">
            <summary>
            Debug view for the IProducerConsumerCollection.
            </summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionDebugView`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionDebugView`1"/>
            </summary>
            <param name="collection">An instance of <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/> to use</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionDebugView`1.Values">
            <summary>
            Gets a collection of values
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1">
            <summary>
            Provides a base implementation for producer-consumer collections that wrap other
            producer-consumer collections.
            </summary>
            <typeparam name="T">Specifies the type of elements in the collection.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Initializes the ProducerConsumerCollectionBase instance.
            </summary>
            <param name="contained">The collection to be wrapped by this instance.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>
            Attempts to add the specified value to the end of the deque.
            </summary>
            <param name="item">The item to add.</param>
            <returns>true if the item could be added; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
            <summary>
            Attempts to remove and return an item from the collection.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, item contains the item removed. If
            no item was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.ToArray">
            <summary>
            Creates an array containing the contents of the collection.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">The array to which the data should be copied.</param>
            <param name="index">The starting index at which data should be copied.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">The array to which the data should be copied.</param>
            <param name="index">The starting index at which data should be copied.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets whether the collection is synchronized.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the synchronization root object for the collection.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.ContainedCollection">
            <summary>
            Gets the contained collection.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.TryAdd(`0)">
            <summary>
            Attempts to add the specified value to the end of the deque.
            </summary>
            <param name="item">The item to add.</param>
            <returns>true if the item could be added; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ProducerConsumerCollectionBase`1.TryTake(`0@)">
            <summary>
            Attempts to remove and return an item from the collection.
            </summary>
            <param name="item">
            When this method returns, if the operation was successful, item contains the item removed. If
            no item was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the collection; otherwise, false.
            </returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1">
            <summary>
            Provides a reduction variable for aggregating data across multiple threads involved in a computation.
            </summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1._seedFactory">
            <summary>
            The factory used to initialize a value on a thread.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1._threadLocal">
            <summary>
            Thread-local storage for each thread's value.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1._values">
            <summary>
            The list of all thread-local values for later enumeration.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.#ctor">
            <summary>
            Initializes the instances.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.#ctor(System.Func{`0})">
            <summary>
            Initializes the instances.
            </summary>
            <param name="seedFactory">
            The function invoked to provide the initial value for a thread.  
            If null, the default value of T will be used as the seed.
            </param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.Value">
            <summary>
            Gets or sets the value for the current thread.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.Values">
            <summary>
            Gets the values for all of the threads that have used this instance.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.Reduce(System.Func{`0,`0,`0})">
            <summary>
            Applies an accumulator function over the values in this variable.
            </summary>
            <param name="function">An accumulator function to be invoked on each value.</param>
            <returns>The accumulated value.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.Reduce``1(``0,System.Func{``0,`0,``0})">
            <summary>
            Applies an accumulator function over the values in this variable.
            The specified seed is used as the initial accumulator value.
            </summary>
            <param name="seed"></param>
            <param name="function">An accumulator function to be invoked on each value.</param>
            <returns>The accumulated value.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable`1.CreateValue">
            <summary>
            Creates a value for the current thread and stores it in the central list of values.
            </summary>
            <returns>The boxed value.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariableDebugView`1">
            <summary>
            Debug view for the reductino variable
            </summary>
            <typeparam name="T">Specifies the type of the data being aggregated.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariableDebugView`1.#ctor(YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariable{`0})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariableDebugView`1"/>
            </summary>
            <param name="variable">An instance of reduction variable to perform debug view for</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ReductionVariableDebugView`1.Values">
            <summary>
            Gets a collection of values
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue">
            <summary>
            Represents a queue of tasks to be started and executed serially.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue._tasks">
            <summary>
            The ordered queue of tasks to be executed. Also serves as a lock protecting all shared state.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue._taskInFlight">
            <summary>
            The task currently executing, or null if there is none.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue.Enqueue(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Enqueues the task to be processed serially and in order.
            </summary>
            <param name="taskGenerator">The function that generates a non-started task.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue.Enqueue(System.Threading.Tasks.Task)">
            <summary>
            Enqueues the non-started task to be processed serially and in order.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue.Completed">
            <summary>
            Gets a Task that represents the completion of all previously queued tasks.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue.EnqueueInternal(System.Object)">
            <summary>
            Enqueues the task to be processed serially and in order.
            </summary>
            <param name="taskOrFunction">The task or functino that generates a task.</param>
            <remarks>The task must not be started and must only be started by this instance.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue.OnTaskCompletion(System.Threading.Tasks.Task)">
            <summary>
            Called when a Task completes to potentially start the next in the queue.
            </summary>
            <param name="ignored">The task that completed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SerialTaskQueue.StartTask_CallUnderLock(System.Object)">
            <summary>
            Starts the provided task (or function that returns a task).
            </summary>
            <param name="nextItem">The next task or function that returns a task.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass">
            <summary>
            Provides a simple, reference type wrapper for SpinLock.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass.#ctor">
            <summary>
            Initializes an instance of the SpinLockClass class.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass.#ctor(System.Boolean)">
            <summary>
            Initializes an instance of the SpinLockClass class.
            </summary>
            <param name="enableThreadOwnerTracking">
            Controls whether the SpinLockClass should track
            thread-ownership fo the lock.
            </param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass.Execute(System.Action)">
            <summary>
            Runs the specified delegate under the lock.
            </summary>
            <param name="runUnderLock">The delegate to be executed while holding the lock.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass.Enter(System.Boolean@)">
            <summary>
            Enters the lock.
            </summary>
            <param name="lockTaken">
            Upon exit of the Enter method, specifies whether the lock was acquired. 
            The variable passed by reference must be initialized to false.
            </param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass.Exit">
            <summary>
            Exits the SpinLock.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.SpinLockClass.Exit(System.Boolean)">
            <summary>
            Exits the SpinLock
            </summary>
            <param name="useMemoryBarrier">
            A Boolean value that indicates whether a memory fence should be issued in
            order to immediately publish the exit operation to other threads.
            </param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom">
            <summary>
            Represents a thread-safe, pseudo-random number generator.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom._global">
            <summary>
            Seed provider.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom._local">
            <summary>
            The underlyin provider of randomness, one instance per thread, initialized with _global.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than MaxValue.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. However, 
            if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.ThreadSafeRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream">
            <summary>
            Writeable stream for using a separate thread in a producer/consumer scenario.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream._writeableStream">
            <summary>
            The underlying stream to target.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream._chunks">
            <summary>
            The collection of chunks to be written.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream._processingTask">
            <summary>
            The Task to use for background writing.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the TransferStream.
            </summary>
            <param name="writeableStream">The underlying stream to which to write.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream.CanWrite">
            <summary>
            Determines whether data can be written to the stream.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream.
            </summary>
            <param name="buffer">An array of bytes. Write copies count bytes from buffer to the stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.CoordinationDataStructures.TransferStream.Close">
            <summary>
            Closes the stream and releases all resources associated with it.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.LazyExtensions">
            <summary>
            Extension methods for Lazy.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LazyExtensions.Force``1(System.Lazy{``0})">
            <summary>
            Forces value creation of a Lazy instance.
            </summary>
            <typeparam name="T">Specifies the type of the value being lazily initialized.</typeparam>
            <param name="lazy">The Lazy instance.</param>
            <returns>The initialized Lazy instance.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LazyExtensions.GetValueAsync``1(System.Lazy{``0})">
            <summary>
            Retrieves the value of a Lazy asynchronously.
            </summary>
            <typeparam name="T">Specifies the type of the value being lazily initialized.</typeparam>
            <param name="lazy">The Lazy instance.</param>
            <returns>A Task representing the Lazy's value.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LazyExtensions.Create``1(``0)">
            <summary>
            Creates a Lazy that's already been initialized to a specified value.
            </summary>
            <typeparam name="T">The type of the data to be initialized.</typeparam>
            <param name="value">The value with which to initialize the Lazy instance.</param>
            <returns>The initialized Lazy.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.LinqToTasks">
            <summary>
            Provides LINQ support for Tasks by implementing the primary standard query operators.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.SelectMany``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="collectionSelector"></param>
            <param name="resultSelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollection"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.Where``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.Join``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.Join``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.GroupJoin``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Threading.Tasks.Task{``1},``3})">
            <summary>
            
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.GroupJoin``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Threading.Tasks.Task{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <param name="comparer"></param>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.GroupBy``3(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.LinqToTasks.OneElementGrouping`2">
            <summary>Represents a grouping of one element.</summary>
            <typeparam name="TKey">The type of the key for the element.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.OrderBy``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.OrderByDescending``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.ThenBy``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.LinqToTasks.ThenByDescending``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="keySelector"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner">
            <summary>
            Partitions an enumerable into chunks based on user-supplied criteria.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,System.Int32})">
            <summary>
            Creates a partitioner that chooses the next chunk size based on a user-supplied function.
            </summary>
            <typeparam name="TSource">The type of the data being partitioned.</typeparam>
            <param name="source">The data being partitioned.</param>
            <param name="nextChunkSizeFunc">A function that determines the next chunk size based on the
            previous chunk size.</param>
            <returns>A partitioner.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a partitioner that always uses a user-specified chunk size.
            </summary>
            <typeparam name="TSource">The type of the data being partitioned.</typeparam>
            <param name="source">The data being partitioned.</param>
            <param name="chunkSize">The chunk size to be used.</param>
            <returns>A partitioner.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Creates a partitioner that chooses chunk sizes between the user-specified min and max.
            </summary>
            <typeparam name="TSource">The type of the data being partitioned.</typeparam>
            <param name="source">The data being partitioned.</param>
            <param name="minChunkSize">The minimum chunk size to use.</param>
            <param name="maxChunkSize">The maximum chunk size to use.</param>
            <returns>A partitioner.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1">
            <summary>
            Partitions an enumerable into chunks based on user-supplied criteria.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.#ctor(YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner{`0},System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators"/>
            </summary>
            <param name="parentPartitioner">An instance of parent partioner</param>
            <param name="referenceCountForDisposal"></param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.EnumerableOfEnumerators.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{System.Int32,System.Int32})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1"/>
            </summary>
            <param name="source">A source collection to make chunks from</param>
            <param name="nextChunkSizeFunc">An instance of delegate to obtain the next chink of data</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1"/>
            </summary>
            <param name="source">A source collection to make chunks from</param>
            <param name="chunkSize">A sizze of a chunk</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1"/>
            </summary>
            <param name="source">A source collection to make chunks from</param>
            <param name="minChunkSize">A minimum chunk size</param>
            <param name="maxChunkSize">A maximum chunk size</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.GetOrderablePartitions(System.Int32)">
            <summary>
            Partitions the underlying collection into the specified number of orderable partitions.
            </summary>
            <param name="partitionCount">The number of partitions to create.</param>
            <returns>An object that can create partitions over the underlying data source.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.SupportsDynamicPartitions">
            <summary>
            Gets whether additional partitions can be created dynamically.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.ChunkPartitioner`1.GetOrderableDynamicPartitions">
            <summary>
            Creates an object that can partition the underlying collection into a variable number of
            partitions.
            </summary>
            <returns>
            An object that can create partitions over the underlying data source.
            </returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner">
            <summary>
            Partitions a data source one item at a time.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1">
            <summary>
            Partitions an enumerable one item at a time.
            </summary>
            <typeparam name="T">Specifies the type of data contained in the list.</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator">
            <summary>
            Dynamically generates a partitions on a shared enumerator.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._sharedEnumerator">
            <summary>
            The source enumerator shared amongst all partitions.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._nextAvailablePosition">
            <summary>
            The next available position to be yielded.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._remainingPartitions">
            <summary>
            The number of partitions remaining to be disposed, potentially including this dynamic generator.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator._disposed">
            <summary>
            Whether this dynamic partitioner has been disposed.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.#ctor(System.Collections.Generic.IEnumerator{`0},System.Boolean)">
            <summary>
            Initializes the dynamic generator.
            </summary>
            <param name="sharedEnumerator">The enumerator shared by all partitions.</param>
            <param name="requiresDisposal">Whether this generator will be disposed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.System#IDisposable#Dispose">
            <summary>
            Closes the shared enumerator if all other partitions have completed.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.GetEnumerator">
            <summary>
            Increments the number of partitions in use and returns a new partition.
            </summary>
            <returns>The new partition.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.DynamicGenerator.GetEnumeratorCore">
            <summary>
            Creates a partition.
            </summary>
            <returns>The new partition.</returns>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1._source">
            <summary>
            The enumerable to be partitioned.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the partitioner.
            </summary>
            <param name="source">The enumerable to be partitioned.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.SupportsDynamicPartitions">
            <summary>
            Gets whether this partitioner supports dynamic partitioning (it does).
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.GetOrderablePartitions(System.Int32)">
            <summary>
            Partitions the underlying collection into the specified number of orderable partitions.
            </summary>
            <returns>
            A list containing <paramref name="partitionCount"/> enumerators.
            </returns>
            <param name="partitionCount">The number of partitions to create.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemEnumerablePartitioner`1.GetOrderableDynamicPartitions">
            <summary>
            Gets a list of the specified static number of partitions.
            </summary>
            <returns>The list of created partitions ready to be iterated.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1">
            <summary>
            Partitions a list one item at a time.
            </summary>
            <typeparam name="T">Specifies the type of data contained in the list.</typeparam>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1._source">
            <summary>
            The list to be partitioned.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes the partitioner.
            </summary>
            <param name="source">The list to be partitioned.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.SupportsDynamicPartitions">
            <summary>
            Gets whether this partitioner supports dynamic partitioning (it does).
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.GetOrderablePartitions(System.Int32)">
            <summary>
            Gets a list of the specified static number of partitions.
            </summary>
            <param name="partitionCount">The static number of partitions to create.</param>
            <returns>The list of created partitions ready to be iterated.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.GetOrderableDynamicPartitions">
            <summary>
            Creates a dynamic partitioner for creating a dynamic number of partitions.
            </summary>
            <returns>The dynamic partitioner.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.SingleItemIListPartitioner`1.GetOrderableDynamicPartitionsCore(System.Collections.Generic.IList{`0},System.Runtime.CompilerServices.StrongBox{System.Int32})">
            <summary>
            An enumerable that creates individual enumerators that all work together to partition the list.
            </summary>
            <param name="source">The list being partitioned.</param>
            <param name="nextIteration">An integer shared between partitions denoting the next available index in the source.</param>
            <returns>An enumerable that generates enumerators which participate in partitioning the list.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.Partitioners.SingleItemPartitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a partitioner for an enumerable that partitions it one item at a time.
            </summary>
            <typeparam name="T">Specifies the type of data contained in the enumerable.</typeparam>
            <param name="source">The source enumerable to be partitioned.</param>
            <returns>The partitioner.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskCompletionSourceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskCompletionSourceExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskCompletionSourceExtensions.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Attempts to transfer the result of a Task to the TaskCompletionSource.</summary>
            <typeparam name="TResult">Specifies the type of the result.</typeparam>
            <param name="resultSetter">The TaskCompletionSource.</param>
            <param name="task">The task whose completion results should be transfered.</param>
            <returns>Whether the transfer could be completed.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskExtras">
            <summary>
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.AttachToParent(System.Threading.Tasks.Task)">
            <summary>
            Ensures that a parent task can't transition into a completed state
            until the specified task has also completed, even if it's not
            already a child task.
            </summary>
            <param name="task">The task to attach to the current task as a child.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.IgnoreExceptions(System.Threading.Tasks.Task)">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.IgnoreExceptions``1(System.Threading.Tasks.Task{``0})">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.FailFastOnException(System.Threading.Tasks.Task)">
            <summary>Fails immediately when an exception is encountered.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.FailFastOnException``1(System.Threading.Tasks.Task{``0})">
            <summary>Fails immediately when an exception is encountered.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.PropagateExceptions(System.Threading.Tasks.Task)">
            <summary>Propagates any exceptions that occurred on the specified task.</summary>
            <param name="task">The Task whose exceptions are to be propagated.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.PropagateExceptions(System.Threading.Tasks.Task[])">
            <summary>Propagates any exceptions that occurred on the specified tasks.</summary>
            <param name="tasks">The Tassk whose exceptions are to be propagated.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.ToObservable``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Creates an IObservable that represents the completion of a Task.
            </summary>
            <typeparam name="TResult">Specifies the type of data returned by the Task.</typeparam>
            <param name="task">The Task to be represented as an IObservable.</param>
            <returns>An IObservable that represents the completion of the Task.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskExtras.TaskObservable`1">
            <summary>
            An implementation of IObservable that wraps a Task.
            </summary>
            <typeparam name="TResult">The type of data returned by the task.</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskExtras.CancelOnDispose">
            <summary>
            Translate a call to IDisposable.Dispose to a CancellationTokenSource.Cancel.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then(System.Threading.Tasks.Task,System.Action)">
            <summary>Creates a task that represents the completion of a follow-up action when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The action to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the action.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then``1(System.Threading.Tasks.Task,System.Func{``0})">
            <summary>Creates a task that represents the completion of a follow-up function when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The function to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the function.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>Creates a task that represents the completion of a follow-up action when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The action to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the action.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>Creates a task that represents the completion of a follow-up function when a task completes.</summary>
            <param name="task">The task.</param>
            <param name="next">The function to run when the task completes.</param>
            <returns>The task that represents the completion of both the task and the function.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task based on the result of the first task.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>Creates a task that represents the completion of a second task when a first task completes.</summary>
            <param name="task">The first task.</param>
            <param name="next">The function that produces the second task based on the result of the first.</param>
            <returns>The task that represents the completion of both the first and second task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.
            </summary>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Creates a new Task that mirrors the supplied task but that will be canceled after the specified timeout.
            </summary>
            <typeparam name="TResult">Specifies the type of data contained in the task.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>The new Task that may time out.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskExtras.WaitForCompletionStatus(System.Threading.Tasks.Task)">
            <summary>Waits for the task to complete execution, returning the task's final status.</summary>
            <param name="task">The task for which to wait.</param>
            <returns>The completion status of the task.</returns>
            <remarks>Unlike Wait, this method will not throw an exception if the task ends in the Faulted or Canceled state.</remarks>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.ToGeneric``1(System.Threading.Tasks.TaskFactory)">
            <summary>
            Creates a generic TaskFactory from a non-generic one.
            </summary>
            <typeparam name="TResult">Specifies the type of Task results for the Tasks created by the new TaskFactory.</typeparam>
            <param name="factory">The TaskFactory to serve as a template.</param>
            <returns>The created TaskFactory.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.ToNonGeneric``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>
            Creates a generic TaskFactory from a non-generic one.
            </summary>
            <typeparam name="TResult">Specifies the type of Task results for the Tasks created by the new TaskFactory.</typeparam>
            <param name="factory">The TaskFactory to serve as a template.</param>
            <returns>The created TaskFactory.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.GetTargetScheduler(System.Threading.Tasks.TaskFactory)">
            <summary>
            Gets the TaskScheduler instance that should be used to schedule tasks.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.GetTargetScheduler``1(System.Threading.Tasks.TaskFactory{``0})">
            <summary>
            Gets the TaskScheduler instance that should be used to schedule tasks.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.ContinuationOptionsFromCreationOptions(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Converts TaskCreationOptions into TaskContinuationOptions.
            </summary>
            <param name="creationOptions"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="action">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{``0})">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{System.Object,``0},System.Object)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Create``1(System.Threading.Tasks.TaskFactory{``0},System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a Task using the TaskFactory.</summary>
            <param name="factory">The factory to use.</param>
            <param name="function">The delegate for the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created task.  The task has not been scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32)">
            <summary>
            Creates a Task that will complete after the specified delay.
            </summary>
            <param name="factory">The TaskFactory.</param>
            <param name="millisecondsDelay">The delay after which the Task should transition to RanToCompletion.</param>
            <returns>A Task that will be completed after the specified duration.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a Task that will complete after the specified delay.
            </summary>
            <param name="factory">The TaskFactory.</param>
            <param name="millisecondsDelay">The delay after which the Task should transition to RanToCompletion.</param>
            <param name="cancellationToken">The cancellation token that can be used to cancel the timed task.</param>
            <returns>A Task that will be completed after the specified duration and that's cancelable with the specified token.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed(System.Threading.Tasks.TaskFactory,System.Int32,System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="action">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The cancellation token to assign to the created Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0})">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.StartNewDelayed``1(System.Threading.Tasks.TaskFactory{``0},System.Int32,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and schedules a task for execution after the specified time delay.
            </summary>
            <param name="factory">The factory to use to create the task.</param>
            <param name="millisecondsDelay">The delay after which the task will be scheduled.</param>
            <param name="function">The delegate executed by the task.</param>
            <param name="state">An object provided to the delegate.</param>
            <param name="cancellationToken">The CancellationToken to assign to the Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which the Task will be scheduled.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromException(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>
            Creates a Task that has completed in the Faulted state with the specified exception.
            </summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromException``1(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>
            Creates a Task that has completed in the Faulted state with the specified exception.
            </summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromResult``1(System.Threading.Tasks.TaskFactory,``0)">
            <summary>
            Creates a Task that has completed in the RanToCompletion state with the specified result.
            </summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="result">The result with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromCancellation(System.Threading.Tasks.TaskFactory,System.Threading.CancellationToken)">
            <summary>
            Creates a Task that has completed in the Canceled state with the specified CancellationToken.
            </summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="cancellationToken">The CancellationToken with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromCancellation``1(System.Threading.Tasks.TaskFactory,System.Threading.CancellationToken)">
            <summary>
            Creates a Task that has completed in the Canceled state with the specified CancellationToken.
            </summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="cancellationToken">The CancellationToken with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.DelegateCache`1">
            <summary>
            A cache of delegates.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.DelegateCache`1.DefaultResult">
            <summary>Function that returns default(TResult).</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromException``1(System.Threading.Tasks.TaskFactory{``0},System.Exception)">
            <summary>
            Creates a Task that has completed in the Faulted state with the specified exception.
            </summary>
            <param name="factory">The target TaskFactory.</param>
            <param name="exception">The exception with which the Task should fault.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromResult``1(System.Threading.Tasks.TaskFactory{``0},``0)">
            <summary>
            Creates a Task that has completed in the RanToCompletion state with the specified result.
            </summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="result">The result with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromCancellation``1(System.Threading.Tasks.TaskFactory{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a Task that has completed in the Canceled state with the specified CancellationToken.
            </summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam>
            <param name="factory">The target TaskFactory.</param>
            <param name="cancellationToken">The CancellationToken with which the Task should complete.</param>
            <returns>The completed Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.FromAsync(System.Threading.Tasks.TaskFactory,System.Threading.WaitHandle)">
            <summary>Creates a Task that will be completed when the specified WaitHandle is signaled.</summary>
            <param name="factory">The target factory.</param>
            <param name="waitHandle">The WaitHandle.</param>
            <returns>The created Task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.IterateWithResult``1(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Asynchronously iterates through an enumerable of tasks.
            </summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <param name="state">The asynchronous state for the returned Task.</param>
            <param name="cancellationToken">The cancellation token used to cancel the iteration.</param>
            <param name="creationOptions">Options that control the task's behavior.</param>
            <param name="scheduler">The scheduler to which tasks will be scheduled.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.TrackedSequence(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task}[])">
            <summary>
            Asynchronously executes a sequence of tasks, maintaining a list of all tasks processed.
            </summary>
            <param name="factory">The TaskFactory to use to create the task.</param>
            <param name="functions">
            The functions that generate the tasks through which to iterate sequentially.
            Iteration will cease if a task faults.
            </param>
            <returns>A Task that will return the list of tracked tasks iterated.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.TrackedSequenceInternal(System.Collections.Generic.IEnumerable{System.Func{System.Threading.Tasks.Task}},System.Threading.Tasks.TaskCompletionSource{System.Collections.Generic.IList{System.Threading.Tasks.Task}})">
            <summary>
            Creates the enumerable to iterate through with Iterate.
            </summary>
            <param name="functions">
            The functions that generate the tasks through which to iterate sequentially.
            Iteration will cease if a task faults.
            </param>
            <param name="tcs">The TaskCompletionSource to resolve with the asynchronous results.</param>
            <returns>The enumerable through which to iterate.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.WhenAll(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task[])">
            <summary>
            Creates a continuation Task that will compplete upon
            the completion of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the array of completed tasks.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.WhenAll``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a continuation Task that will compplete upon
            the completion of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the array of completed tasks.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.WhenAny(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task[])">
            <summary>
            Creates a continuation Task that will complete upon
            the completion of any one of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the completed task.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskFactoryExtensions.WhenAny``1(System.Threading.Tasks.TaskFactory,System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a continuation Task that will complete upon
            the completion of any one of a set of provided Tasks.
            </summary>
            <param name="factory">The TaskFactory to use to create the continuation task.</param>
            <param name="tasks">The array of tasks from which to continue.</param>
            <returns>A task that, when completed, will return the completed task.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions">
            <summary>
            Extension methods for TaskScheduler.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions.ToSynchronizationContext(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Gets a SynchronizationContext that targets this TaskScheduler.
            </summary>
            <param name="scheduler">The target scheduler.</param>
            <returns>A SynchronizationContext that targets this scheduler.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext">
            <summary>
            Provides a SynchronizationContext wrapper for a TaskScheduler.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext._scheduler">
            <summary>
            The scheduler.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes the context with the specified scheduler.
            </summary>
            <param name="scheduler">The scheduler to target.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to the synchronization context.
            </summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches a synchronous message to the synchronization context.
            </summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave">
            <summary>
            Provides concurrent and exclusive task schedulers that coordinate.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView">
            <summary>
            Provides a debug view for ConcurrentExclusiveInterleave.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView._interleave">
            <summary>
            The interleave being debugged.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.#ctor(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave)">
            <summary>
            Initializes the debug view.
            </summary>
            <param name="interleave">The interleave being debugged.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.ConcurrentTasksWaiting">
            <summary>
            Gets the number of tasks waiting to run concurrently.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveDebugView.InterleaveTask">
            <summary>
            Gets a description of the processing task for debugging purposes.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave._internalLock">
            <summary>
            Synchronizes all activity in this type and its generated schedulers.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave._parallelOptions">
            <summary>
            The parallel options used by the asynchronous task and parallel loops.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave._concurrentTaskScheduler">
            <summary>
            The scheduler used to queue and execute "reader" tasks that may run concurrently with other readers.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave._exclusiveTaskScheduler">
            <summary>
            The scheduler used to queue and execute "writer" tasks that must run exclusively while no other tasks for this interleave are running.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave._taskExecuting">
            <summary>
            Whether this interleave has queued its processing task.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave._exclusiveProcessingIncludesChildren">
            <summary>
            Whether the exclusive processing of a task should include all of its children as well.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.#ctor">
            <summary>
            Initialies the ConcurrentExclusiveInterleave.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.#ctor(System.Boolean)">
            <summary>
            Initialies the ConcurrentExclusiveInterleave.
            </summary>
            <param name="exclusiveProcessingIncludesChildren">Whether the exclusive processing of a task should include all of its children as well.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Initialies the ConcurrentExclusiveInterleave.
            </summary>
            <param name="targetScheduler">The target scheduler on which this interleave should execute.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.#ctor(System.Threading.Tasks.TaskScheduler,System.Boolean)">
            <summary>
            Initialies the ConcurrentExclusiveInterleave.
            </summary>
            <param name="targetScheduler">The target scheduler on which this interleave should execute.</param>
            <param name="exclusiveProcessingIncludesChildren">Whether the exclusive processing of a task should include all of its children as well.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentTaskScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this interleave
            that may run concurrently with other tasks on this interleave.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ExclusiveTaskScheduler">
            <summary>
            Gets a TaskScheduler that can be used to schedule tasks to this interleave
            that must run exclusively with regards to other tasks on this interleave.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.NotifyOfNewWork">
            <summary>
            Notifies the interleave that new work has arrived to be processed.
            </summary>
            <remarks>Must only be called while holding the lock.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveInterleaveProcessor">
            <summary>
            The body of the async processor to be run in a Task.  Only one should be running at a time.
            </summary>
            <remarks>This has been separated out into its own method to improve the Parallel Tasks window experience.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ExecuteConcurrentTask(System.Threading.Tasks.Task)">
            <summary>
            Runs a concurrent task.
            </summary>
            <param name="task">The task to execute.</param>
            <remarks>This has been separated out into its own method to improve the Parallel Tasks window experience.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.GetConcurrentTasksUntilExclusiveExists">
            <summary>
            Gets an enumerable that yields waiting concurrent tasks one at a time until
            either there are no more concurrent tasks or there are any exclusive tasks.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.GetExclusiveTasks">
            <summary>
            Gets an enumerable that yields all of the exclusive tasks one at a time.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler">
            <summary>
            A scheduler shim used to queue tasks to the interleave and execute those tasks on request of the interleave.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._interleave">
            <summary>
            The parent interleave.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._maximumConcurrencyLevel">
            <summary>
            The maximum concurrency level for the scheduler.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler._processingTaskOnCurrentThread">
            <summary>
            Whether a Task is currently being processed on this thread.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.#ctor(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave,System.Collections.Generic.Queue{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Initializes the scheduler.
            </summary>
            <param name="interleave">The parent interleave.</param>
            <param name="tasks">The queue to store queued tasks into.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level this scheduler is able to support.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.Tasks">
            <summary>
            Gets the queue of tasks for this scheduler.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>
            Executes a task on this scheduler.
            </summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute the task synchronously on this scheduler.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued to the scheduler.</param>
            <returns>true if the task could be executed; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ConcurrentExclusiveInterleave.ConcurrentExclusiveTaskScheduler.GetScheduledTasks">
            <summary>Gets for debugging purposes the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of the tasks queued.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.CurrentThreadTaskScheduler">
            <summary>Provides a task scheduler that runs tasks on the current thread.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.CurrentThreadTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.CurrentThreadTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided Task synchronously on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the Task was previously queued to the scheduler.</param>
            <returns>True if the Task was successfully executed; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.CurrentThreadTaskScheduler.GetScheduledTasks">
            <summary>Gets the Tasks currently scheduled to this scheduler.</summary>
            <returns>An empty enumerable, as Tasks are never queued, only executed.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.CurrentThreadTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum degree of parallelism for this scheduler.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while
            running on top of the ThreadPool.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.OrderedTaskScheduler">
            <summary>
            Provides a task scheduler that ensures only one task is executing at a time, and that tasks
            execute in the order that they were queued.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.OrderedTaskScheduler.#ctor">
            <summary>Initializes an instance of the OrderedTaskScheduler class.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler">
            <summary>
            Provides a TaskScheduler that provides control over priorities, fairness, and the underlying threads utilized.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView">
            <summary>Debug view for the QueuedTaskScheduler.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.#ctor(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler)">
            <summary>Initializes the debug view.</summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.ScheduledTasks">
            <summary>Gets all of the Tasks queued to the scheduler directly.</summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.Queues">
            <summary>Gets the prioritized and fair queues.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._queueGroups">
            <summary>
            A sorted list of round-robin queue lists.  Tasks with the smallest priority value
            are preferred.  Priority groups are round-robin'd through in order of priority.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._disposeCancellation">
            <summary>Cancellation token used for disposal.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._concurrencyLevel">
            <summary>
            The maximum allowed concurrency level of this scheduler.  If custom threads are
            used, this represents the number of created threads.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._taskProcessingThread">
            <summary>Whether we're processing tasks on the current thread.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._targetScheduler">
            <summary>The scheduler onto which actual work is scheduled.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._nonthreadsafeTaskQueue">
            <summary>The queue of tasks to process when using an underlying target scheduler.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._delegatesQueuedOrRunning">
            <summary>The number of Tasks that have been queued or that are running whiel using an underlying scheduler.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._threads">
            <summary>The threads used by the scheduler to process work.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler._blockingTaskQueue">
            <summary>The collection of tasks to be executed on our custom threads.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.#ctor">
            <summary>Initializes the scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
            <param name="maxConcurrencyLevel">The maximum degree of concurrency allowed for this scheduler's work.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.#ctor(System.Int32,System.String,System.Boolean,System.Threading.ThreadPriority,System.Threading.ApartmentState,System.Int32,System.Action,System.Action)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
            <param name="threadName">The name to use for each of the created threads.</param>
            <param name="useForegroundThreads">A Boolean value that indicates whether to use foreground threads instead of background.</param>
            <param name="threadPriority">The priority to assign to each thread.</param>
            <param name="threadApartmentState">The apartment state to use for each thread.</param>
            <param name="threadMaxStackSize">The stack size to use for each thread.</param>
            <param name="threadInit">An initialization routine to run on each thread.</param>
            <param name="threadFinally">A finalization routine to run on each thread.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.ThreadBasedDispatchLoop(System.Action,System.Action)">
            <summary>The dispatch loop run by all threads in this scheduler.</summary>
            <param name="threadInit">An initialization routine to run when the thread begins.</param>
            <param name="threadFinally">A finalization routine to run before the thread ends.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.DebugQueueCount">
            <summary>Gets the number of queues currently activated.</summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.DebugTaskCount">
            <summary>Gets the number of tasks currently scheduled.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.FindNextTask_NeedsLock(System.Threading.Tasks.Task@,YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue@)">
            <summary>Find the next task that should be executed, based on priorities and fairness and the like.</summary>
            <param name="targetTask">The found task, or null if none was found.</param>
            <param name="queueForTargetTask">
            The scheduler associated with the found task.  Due to security checks inside of TPL,  
            this scheduler needs to be used to execute that task.
            </param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.ProcessPrioritizedAndBatchedTasks">
            <summary>
            Process tasks one at a time in the best order.  
            This should be run in a Task generated by QueueTask.
            It's been separated out into its own method to show up better in Parallel Tasks.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.NotifyNewWorkItem">
            <summary>Notifies the pool that there's a new item to be executed in one of the round-robin queues.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
            <remarks>This does not include the tasks on sub-schedulers.  Those will be retrieved by the debugger separately.</remarks>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.Dispose">
            <summary>Initiates shutdown of the scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.ActivateNewQueue">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <returns>The newly created and activated queue at priority 0.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.ActivateNewQueue(System.Int32)">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <param name="priority">The priority level for the new queue.</param>
            <returns>The newly created and activated queue at the specified priority.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.RemoveQueue_NeedsLock(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueueGroup">
            <summary>A group of queues a the same priority level.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueueGroup.NextQueueIndex">
            <summary>The starting index for the next round-robin traversal.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueueGroup.CreateSearchOrder">
            <summary>Creates a search order through this group.</summary>
            <returns>An enumerable of indices for this group.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue">
            <summary>Provides a scheduling queue associatd with a QueuedTaskScheduler.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView">
            <summary>A debug view for the queue.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView._queue">
            <summary>The queue.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.#ctor(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Initializes the debug view.</summary>
            <param name="queue">The queue to be debugged.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Priority">
            <summary>Gets the priority of this queue in its associated scheduler.</summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Id">
            <summary>Gets the ID of this scheduler.</summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.ScheduledTasks">
            <summary>Gets all of the tasks scheduled to this queue.</summary>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.AssociatedScheduler">
            <summary>Gets the QueuedTaskScheduler with which this queue is associated.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._pool">
            <summary>The scheduler with which this pool is associated.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._workItems">
            <summary>The work items stored in this queue.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._disposed">
            <summary>Whether this queue has been disposed.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue._priority">
            <summary>Gets the priority for this queue.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.#ctor(System.Int32,YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler)">
            <summary>Initializes the queue.</summary>
            <param name="priority">The priority associated with this queue.</param>
            <param name="pool">The scheduler with which this queue is associated.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.WaitingTasks">
            <summary>Gets the number of tasks waiting in this scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Runs the specified ask.</summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.QueuedTaskScheduler.QueuedTaskSchedulerQueue.Dispose">
            <summary>Signals that the queue should be removed from the scheduler as soon as the queue is empty.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler">
            <summary>Provides a task scheduler that supports reprioritizing previously queued tasks.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.Prioritize(System.Threading.Tasks.Task)">
            <summary>Reprioritizes a previously queued task to the front of the queue.</summary>
            <param name="task">The task to be reprioritized.</param>
            <returns>Whether the task could be found and moved to the front of the queue.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.Deprioritize(System.Threading.Tasks.Task)">
            <summary>Reprioritizes a previously queued task to the back of the queue.</summary>
            <param name="task">The task to be reprioritized.</param>
            <returns>Whether the task could be found and moved to the back of the queue.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Removes a previously queued item from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be removed from the scheduler.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.ProcessNextQueuedItem(System.Object)">
            <summary>Picks up and executes the next item in the queue.</summary>
            <param name="ignored">Ignored.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes the specified task inline.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>Whether the task could be executed inline.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ReprioritizableTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently queued to the scheduler.</summary>
            <returns>An enumerable of the tasks currently queued to the scheduler.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup">
            <summary>Enables the creation of a group of schedulers that support round-robin scheduling for fairness.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup.CreateScheduler">
            <summary>Creates a new scheduler as part of this group.</summary>
            <returns>The new scheduler.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup.Schedulers">
            <summary>Gets a collection of all schedulers in this group.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup.RemoveQueue_NeedsLock(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup.RoundRobinTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup.NotifyNewWorkItem">
            <summary>Notifies the ThreadPool that there's a new item to be executed.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.RoundRobinSchedulerGroup.RoundRobinTaskSchedulerQueue">
            <summary>A scheduler that participates in round-robin scheduling.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler">
            <summary>Provides a scheduler that uses STA threads.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler._tasks">
            <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler._threads">
            <summary>The STA threads used by the scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the StaTaskScheduler class with the specified concurrency level.</summary>
            <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a Task to be executed by this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler.GetScheduledTasks">
            <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
            <returns>An enumerable of all tasks currently scheduled.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Determines whether a Task may be inlined.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.StaTaskScheduler.Dispose">
            <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler">
            <summary>Provides a task scheduler that targets a specific SynchronizationContext.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler._tasks">
            <summary>The queue of tasks to execute, maintained for debugging purposes.</summary>
        </member>
        <member name="F:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler._context">
            <summary>The target context under which to execute the queued tasks.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler.#ctor">
            <summary>Initializes an instance of the SynchronizationContextTaskScheduler class.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes an instance of the SynchronizationContextTaskScheduler class
            with the specified SynchronizationContext.
            </summary>
            <param name="context">The SynchronizationContext under which to execute tasks.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler for execution on the I/O ThreadPool.</summary>
            <param name="task">The Task to queue.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of tasks queued to the scheduler.</summary>
            <returns>An enumerable of tasks queued to the scheduler.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.SynchronizationContextTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ThreadPerTaskScheduler">
            <summary>Provides a task scheduler that dedicates a thread per task.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ThreadPerTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks currently scheduled to this scheduler.</summary>
            <remarks>This will always return an empty enumerable, as tasks are launched as soon as they're queued.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ThreadPerTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Starts a new thread to process the provided task.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.ThreadPerTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Runs the provided task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler">
            <summary>Provides a work-stealing scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.#ctor">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <remarks>This constructors defaults to using twice as many threads as there are processors.</remarks>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <param name="concurrencyLevel">The number of threads to use in the scheduler.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be scheduled.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="P:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently scheduled to this scheduler.</summary>
            <returns>An enumerable containing all of the scheduled tasks.</returns>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.AddWsq(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Adds a work-stealing queue to the set of queues.</summary>
            <param name="wsq">The queue to be added.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.RemoveWsq(YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Remove a work-stealing queue from the set of queues.</summary>
            <param name="wsq">The work-stealing queue to remove.</param>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.DispatchLoop">
            <summary>
            The dispatch loop run by each thread in the scheduler.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingTaskScheduler.Dispose">
            <summary>Signal the scheduler to shutdown and wait for all threads to finish.</summary>
        </member>
        <member name="T:YP.Toolkit.System.ParallelExtensions.TaskSchedulers.WorkStealingQueue`1">
            <summary>A work-stealing queue.</summary>
            <typeparam name="T">Specifies the type of data stored in the queue.</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.ArrayExtension">
            <summary>
            	Extension methods for the array data type
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.IsNullOrEmpty(System.Array)">
            <summary>
            	Check if the array is null or empty
            </summary>
            <param name = "source"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.WithinIndex(System.Array,System.Int32)">
            <summary>
            	Check if the index is within the array
            </summary>
            <param name = "source"></param>
            <param name = "index"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            	Check if the index is within the array
            </summary>
            <param name = "source"></param>
            <param name = "index"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.CombineArray``1(``0[],``0[])">
            <summary>
            Combine two arrays into one.
            </summary>
            <typeparam name="T">Type of Array</typeparam>
            <param name="combineWith">Base array in which arrayToCombine will add.</param>
            <param name="arrayToCombine">Array to combine with Base array.</param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.ClearAll(System.Array)">
            <summary>
            To clear the contents of the array.
            </summary>
            <param name="clear"> The array to clear</param>
            <returns>Cleared array</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.ClearAll``1(``0[])">
            <summary>
            To clear the contents of the array.
            </summary>
            <typeparam name="T">The type of array</typeparam>
            <param name="arrayToClear"> The array to clear</param>
            <returns>Cleared array</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a block of items from an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a block of items from an array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="padToLength"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.BlockCopy``1(``0[],System.Int32)">
            <summary>
            Allows enumeration over an Array in blocks
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ArrayExtension.BlockCopy``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Allows enumeration over an Array in blocks
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="count"></param>
            <param name="padToLength"></param>
            <returns></returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.BooleanExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.BooleanExtensions.ToYesNoString(System.Boolean)">
            <summary>
            Converts the value of this instance to its equivalent string representation (either "Yes" or "No").
            </summary>
            <param name="boolean"></param>
            <returns>string</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.BooleanExtensions.ToBinaryTypeNumber(System.Boolean)">
            <summary>
            Converts the value in number format {1 , 0}.
            </summary>
            <param name="boolean"></param>
            <returns>int</returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.ByteArrayExtensions">
            <summary>
            	Extension methods for byte-Arrays
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ByteArrayExtensions.FindArrayInArray(System.Byte[],System.Byte[])">
            <summary>
            	Find the first occurence of an byte[] in another byte[]
            </summary>
            <param name = "buf1">the byte[] to search in</param>
            <param name = "buf2">the byte[] to find</param>
            <returns>the first position of the found byte[] or -1 if not found</returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.CollectionExtensions">
            <summary>
            	Extension methods for all kind of Collections implementing the ICollection&lt;T&gt; interface
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            	Adds a value uniquely to to a collection and returns a value whether the value was added or not.
            </summary>
            <typeparam name = "T">The generic collection value type</typeparam>
            <param name = "collection">The collection.</param>
            <param name = "value">The value to be added.</param>
            <returns>Indicates whether the value was added or not</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.AddRangeUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            	Adds a range of value uniquely to a collection and returns the amount of values added.
            </summary>
            <typeparam name = "T">The generic collection value type.</typeparam>
            <param name = "collection">The collection.</param>
            <param name = "values">The values to be added.</param>
            <returns>The amount if values that were added.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            	Remove an item from the collection with predicate
            </summary>
            <param name = "collection"></param>
            <param name = "predicate"></param>
            <typeparam name = "T"></typeparam>
            <exception cref = "T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.IsEmpty(System.Collections.ICollection)">
            <summary>
            Tests if the collection is empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Tests if the collection is empty.
            </summary>
            <typeparam name="T">The type of the items in 
            the collection.</typeparam>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.IsEmpty(System.Collections.IList)">
            <summary>
            Tests if the collection is empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests if the collection is empty.
            </summary>
            <typeparam name="T">The type of the items in 
            the collection.</typeparam>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Second``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the second element in current sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The second element of the sequence.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Third``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the third element in current sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The third element in the sequence.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Fourth``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the fourth element in current sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The fourth element in the sequence.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Fifth``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the fifth element in current sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The fifth element in the sequence.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Sixth``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the sixth element in current sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The sixth element in the sequence.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Seventh``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the sixth element in current sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The sixth element in the sequence.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.CollectionExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a slice of the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="startIndex">The start index.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.DictionaryExtensions">
            <summary>
            	Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Sorts the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to be sorted.</param>
            <param name="comparer">The comparer used to sort dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Sorts the dictionary by value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.Invert``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Inverts the specified dictionary. (Creates a new dictionary with the values as key, and key as values)
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.ToHashTable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a (non-generic) Hashtable from the Dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.GetFirstValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,``0[])">
            <summary>
            Returns the value of the first entry found with one of the <paramref name="keys"/> received.
            <para>Returns <paramref name="defaultValue"/> if none of the keys exists in this collection </para>
            </summary>
            <param name="defaultValue">Default value if none of the keys </param>
            <param name="keys"> keys to search for (in order) </param>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value associated with the specified key, or a default value if no element is found.
            </summary>
            <typeparam name="TKey">The key data type</typeparam>
            <typeparam name="TValue">The value data type</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of interest.</param>
            <returns>The value associated with the specified key if the key is found, the default value for the value data type if the key is not found</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value associated with the specified key, or the specified default value if no element is found.
            </summary>
            <typeparam name="TKey">The key data type</typeparam>
            <typeparam name="TValue">The value data type</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of interest.</param>
            <param name="defaultValue">The default value to return if the key is not found.</param>
            <returns>The value associated with the specified key if the key is found, the specified default value if the key is not found</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.GetOrThrow``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Exception)">
            <summary>
            Returns the value associated with the specified key, or throw the specified exception if no element is found.
            </summary>
            <typeparam name="TKey">The key data type</typeparam>
            <typeparam name="TValue">The value data type</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of interest.</param>
            <param name="exception">The exception to throw if the key is not found.</param>
            <returns>The value associated with the specified key if the key is found, the specified exception is thrown if the key is not found</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.IsEmpty(System.Collections.IDictionary)">
            <summary>
            Tests if the collection is empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.DictionaryExtensions.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Tests if the IDictionary is empty.
            </summary>
            <typeparam name="TKey">The type of the key of 
            the IDictionary.</typeparam>
            <typeparam name="TValue">The type of the values
            of the IDictionary.</typeparam>
            <param name="collection">The collection to test.</param>
            <returns>True if the collection is empty.</returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.EventHandlerExtenders">
            <summary>
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.EventHandlerExtenders.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event of any type that implements the standard event signature 
            (object sender, :EventArgs e) on the current thread.
            </summary>
            <typeparam name="TEventArgs">The type of the EventHandler used to raise the event.</typeparam>
            <param name="eventHandler">The EventHandler instance use to raise the event.</param>
            <param name="sender">The sender object instance to pass to subscribers.</param>
            <param name="e">The EventArgs (or derivative) to pass to subscribers.</param>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.EventHandlerExtenders.RaiseEventOnUiThread``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event of any type that implements the standard event signature 
            (object sender, :EventArgs e) on the event subscribers UI thread if possible.
            </summary>
            <typeparam name="TEventArgs">The type of the EventHandler used to raise the event.</typeparam>
            <param name="eventHandler">The EventHandler instance use to raise the event.</param>
            <param name="sender">The sender object instance to pass to subscribers.</param>
            <param name="e">The EventArgs (or derivative) to pass to subscribers.</param>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.EventHandlerExtenders.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises an event.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.EventHandlerExtenders.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event.
            </summary>
            <typeparam name="T">The type of event arguments.</typeparam>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The instance of the event arguments.</param>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.FileInfoExtensions">
            <summary>
            	Extension methods for the FileInfo and FileInfo-Array classes
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            	Renames a file.
            </summary>
            <param name = "file">The file.</param>
            <param name = "newName">The new name.</param>
            <returns>The renamed file</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.Rename("test2.txt");
            	</code>
            </example>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.FileInfoExtensions.RenameFileWithoutExtension(System.IO.FileInfo,System.String)">
            <summary>
            	Renames a without changing its extension.
            </summary>
            <param name = "file">The file.</param>
            <param name = "newName">The new name.</param>
            <returns>The renamed file</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.RenameFileWithoutExtension("test3");
            	</code>
            </example>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.FileInfoExtensions.MoveTo(System.IO.FileInfo[],System.String)">
            <summary>
            	Moves several files to a new folder at once and optionally consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "targetPath">The target path.</param>
            <returns>The moved files</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.FileInfoExtensions.MoveTo(System.IO.FileInfo[],System.String,System.Boolean)">
            <summary>
            	Movies several files to a new folder at once and optionally consolidates any exceptions.
            </summary>
            <param name = "files">The files.</param>
            <param name = "targetPath">The target path.</param>
            <param name = "consolidateExceptions">if set to <c>true</c> exceptions are consolidated and the processing is not interrupted.</param>
            <returns>The moved files</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.FileInfoExtensions.SetAttributes(System.IO.FileInfo[],System.IO.FileAttributes)">
            <summary>
            	Sets file attributes for several files at once
            </summary>
            <param name = "files">The files.</param>
            <param name = "attributes">The attributes to be set.</param>
            <returns>The changed files</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.FileInfoExtensions.SetAttributesAdditive(System.IO.FileInfo[],System.IO.FileAttributes)">
            <summary>
            	Appends file attributes for several files at once (additive to any existing attributes)
            </summary>
            <param name = "files">The files.</param>
            <param name = "attributes">The attributes to be set.</param>
            <returns>The changed files</returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.StreamExtensions">
            <summary>
            	Extension methods any kind of streams
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.GetReader(System.IO.Stream)">
            <summary>
            	Opens a StreamReader using the default encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream reader</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.GetReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Opens a StreamReader using the specified encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The stream reader</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.GetWriter(System.IO.Stream)">
            <summary>
            	Opens a StreamWriter using the default encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream writer</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.GetWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Opens a StreamWriter using the specified encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The stream writer</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            	Reads all text from the stream using the default encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            	Reads all text from the stream using a specified encoding.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The result string.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.SeekToBegin(System.IO.Stream)">
            <summary>
            	Sets the stream cursor to the beginning of the stream.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.SeekToEnd(System.IO.Stream)">
            <summary>
            	Sets the stream cursor to the end of the stream.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The stream</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            	Copies one stream into a another one.
            </summary>
            <param name = "stream">The source stream.</param>
            <param name = "targetStream">The target stream.</param>
            <param name = "bufferSize">The buffer size used to read / write.</param>
            <returns>The source stream.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.CopyToMemory(System.IO.Stream)">
            <summary>
            	Copies any stream into a local MemoryStream
            </summary>
            <param name = "stream">The source stream.</param>
            <returns>The copied memory stream.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            	Reads the entire stream and returns a byte array.
            </summary>
            <param name = "stream">The stream.</param>
            <returns>The byte array</returns>
            <remarks>
            	Thanks to EsbenCarlsen  for providing an update to this method.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.ReadFixedBuffersize(System.IO.Stream,System.Int32)">
            <summary>
            	Reads a fixed number of bytes.
            </summary>
            <param name = "stream">The stream to read from</param>
            <param name = "bufsize">The number of bytes to read.</param>
            <returns>the read byte[]</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>
            	Writes all passed bytes to the specified stream.
            </summary>
            <param name = "stream">The stream.</param>
            <param name = "bytes">The byte array / buffer.</param>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.TypeExtensions">
            <summary>
            	Extension methods for the reflection meta data type "Type"
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.TypeExtensions.IsBaseType(System.Type,System.Type)">
            <summary>
            	Check if this is a base type
            </summary>
            <param name = "type"></param>
            <param name = "checkingType"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            	Check if this is a sub class generic type
            </summary>
            <param name = "generic"></param>
            <param name = "toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.TypeExtensions.CreateGenericTypeInstance``1(System.Type,System.Type[])">
            <summary>
            Closes the passed generic type with the provided type arguments and returns an instance of the newly constructed type.
            </summary>
            <typeparam name="T">The typed type to be returned.</typeparam>
            <param name="genericType">The open generic type.</param>
            <param name="typeArguments">The type arguments to close the generic type.</param>
            <returns>An instance of the constructed type casted to T.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.TypeExtensions.GetQualifiedNameWithoutVersionAndTokenInfo(System.Type)">
            <summary>
            Gets a qualified name of a type without version and assembly token information
            </summary>
            <param name="type">An instance of type to obtain information from</param>
            <returns>A qualified name of a type without version and assembly token information</returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.ValueTypeExtensions">
            <summary>
            	Extension methods for all kind of value types (structs)
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ValueTypeExtensions.IsEmpty``1(``0)">
            <summary>
            	Determines whether the specified value is empty.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ValueTypeExtensions.IsNotEmpty``1(``0)">
            <summary>
            	Determines whether the specified value is not empty.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is not empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.ValueTypeExtensions.ToNullable``1(``0)">
            <summary>
            	Converts the specified value to a corresponding nullable type
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The nullable type</returns>
        </member>
        <member name="T:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions">
            <summary>
                Extension methods for the XmlSerialize
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions.CanXmlSerialize``1(``0)">
            <summary>
                Check that can Xml Serialize this instance or not.
            </summary>
            <typeparam name="T">Type of object to Xml Serialize.</typeparam>
            <param name="instance">An instance of object to Xml serialize.</param>
            <returns>If Xml serialize was possible, returns true, otherwise returns false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions.CanXmlDeserialize``1(System.String)">
            <summary>
                Check that can Xml Deserialize this file or not.
            </summary>
            <typeparam name="T">Type of object which serialized in file.</typeparam>
            <param name="filename">Name of file.</param>
            <returns>IF file can be deserialize returns true, otherwise return false.</returns>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions.CanXmlDeserialize``1(System.IO.Stream)">
            <summary>
                Check that can Xml Deserialize this file or not.
            </summary>
            <typeparam name="T">Type of object which serialized in Stream.</typeparam>
            <param name="stream">Stream to deserialize.</param>
            <returns>IF Stream can be deserialize returns true, otherwise return false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions.XmlSerialize``1(``0,System.IO.Stream)">
            <summary>
                Xml Serialize an instance of specific type to stream.
            </summary>
            <typeparam name="T">Type of instance to Xml serialize.</typeparam>
            <param name="instance">Instance to Xml serialize.</param>
            <param name="stream">Stream to save Xml serialize in.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions.XmlSerialize``1(``0,System.String)">
            <summary>
                Xml Serialize an instance of specific type to file.
            </summary>
            <typeparam name="T">Type of instance to Xml serialize.</typeparam>
            <param name="instance">Instance to Xml serialize.</param>
            <param name="filename">File name to create and store Xml serialized data.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:YP.Toolkit.System.SystemExtensions.XmlSerializeExtensions.XmlDeserialize``1(System.IO.Stream)">
            <summary>
                Xml Deserialize this stream as object of <typeparamref name="T"/> from stream.
            </summary>
            <typeparam name="T">Type of instance to Xml Deserialize.</typeparam>
            <param name="stream">Stream to get Xml serialized data.</param>
            <returns>Returns an Xml Deserialized object.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:YP.Toolkit.System.Tools.ObjectFactory">
            <summary>
            Represents a factory fonctionality for an object
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.ObjectFactory.CreateObject``1(System.Type[],System.Object[])">
            <summary>
            Creates an instance of <see cref="!:T"/>.
            This method can create an object even if it has non-public constructor
            </summary>
            <typeparam name="T">The type of an object to create</typeparam>
            <param name="paramTypes">An instance of a collection that represents constructor parameter types</param>
            <param name="paramValues">An instance of a collection that represents constructors parameters</param>
            <returns>An instance of required object</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.ObjectFactory.CreateObject``1">
            <summary>
            Creates an instance of <see cref="!:T"/>.
            This method can create an object even if it has non-public constructor.
            This method creates an instance of the object that has default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>An instance of required object</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.ObjectFactory.CreateObject(System.Type)">
            <summary>
            Creates an instance of <see cref="!:objectType"/>.
            This method can create an object even if it has non-public constructor.
            This method creates an instance of the object that has default constructor.
            </summary>
            <param name="objectType">The type of an object to create</param>
            <returns>An instance of required object</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Disposable">
            <summary>
            Represents a basic implementation for Disposable pattern 
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Disposable.#ctor">
            <summary>
            Initializes an instance of YP.ToolKit.Common.Patterns.Disposable.Disposable class
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Disposable.#ctor(System.Object)">
            <summary>
            Initializes an instance of YP.ToolKit.Common.Patterns.Disposable.Disposable class with synchronization object
            </summary>
            <param name="lockObject"></param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.Disposable.IsDisposed">
            <summary>
            Gets a value which specifies whether the object has already disposed or not
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.Disposable.LockObject">
            <summary>
            Gets or sets synchronization object
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Disposable.Dispose(System.Boolean)">
            <summary>
            Provides basic implementation of Disposable pattern
            </summary>
            <param name="disposing">A value which specifies whether this method is called from Dispose method or from finalize method</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Disposable.OnDisposing">
            <summary>
            Does actual explicit disposal of available managed resources
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Disposable.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> exception in case the object has already been disposed
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Disposable.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or
              resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase">
            <summary>
            Represents a basic implementation for Disposable pattern 
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.#ctor">
            <summary>
            Initializes an instance of YP.ToolKit.Common.Patterns.Disposable.Disposable class
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.#ctor(System.Object)">
            <summary>
            Initializes an instance of YP.ToolKit.Common.Patterns.Disposable.Disposable class with synchronization object
            </summary>
            <param name="lockObject"></param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.IsDisposed">
            <summary>
            Gets a value which specifies whether the object has already disposed or not
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.LockObject">
            <summary>
            Gets or sets synchronization object
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.Dispose(System.Boolean)">
            <summary>
            Provides basic implementation of Disposable pattern
            </summary>
            <param name="disposing">A value which specifies whether this method is called from Dispose method or from finalize method</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.OnDisposing">
            <summary>
            Does actual explicit disposal of available managed resources
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> exception in case the object has already been disposed
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.DisposableBindableBase.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or
              resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.BackgroundEventSubscription`1">
            <summary>
            Extends <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1"/> to invoke the <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> 
            and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.BackgroundEventSubscription`1.#ctor(YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference,YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.
            </exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
            <typeparam name="TPayload">The type of message that will be passed to the subscribers.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption.PUBLISHER_THREAD"/>
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/> will maintain a 
            <seealso cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate
            </summary>
            <param name="action">The delegate that gets executed when the event is published</param>
            <returns>
            A <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that uniquely identifies the added subscription
            </returns>
            <remarks>
            The CompositePresentationEvent collection is thread-safe
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Subscribe(System.Action{`0},YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption)">
            <summary>
            Subscribes a delegate to an event
            CompositePresentationEvent will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate
            </summary>
            <param name="action">The delegate that gets executed when the event is raised</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback</param>
            <returns>
            A <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that uniquely identifies the added subscription.
            </returns>
            <remarks>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the 
            <see cref="F:YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption.PUBLISHER_THREAD"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/>
            keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>
            A <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that uniquely identifies the added subscription.
            </returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/> 
            will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied 
            <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>),
            the user must explicitly call Unsubscribe for the event when disposing the subscriber
            in order to avoid memory leaks or unexepcted behavior.
            <para/>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Subscribe(System.Action{`0},YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/>
            keeps a reference to the subscriber so it does not get garbage collected.
            </param>
            <returns>
            A <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that uniquely identifies the added subscription.
            </returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/> 
            will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>),
            the user must explicitly call Unsubscribe for the event when disposing
            the subscriber in order to avoid memory leaks or unexepcted behavior.
            <para/>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Subscribe(System.Action{`0},YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption,System.Boolean,System.Predicate{`0})">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/> 
            keeps a reference to the subscriber so it does not get garbage collected.
            </param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>
            A <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that uniquely identifies the added subscription.
            </returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/> 
            will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied 
            <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>),
            the user must explicitly call Unsubscribe for the event when disposing the subscriber 
            in order to avoid memory leaks or unexepcted behavior.
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Publish(`0)">
            <summary>
            Publishes the <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the first subscriber matching <seealso cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1.Contains(System.Action{`0})">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <seealso cref="T:System.Action`1"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
            <returns>
            <see langword="true"/> if there is an <seealso cref="T:System.Action`1"/> that matches; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.DataEventArgs`1.Value">
            <summary>
            Gets the information related to the event.
            </summary>
            <value>
            Information related to the event.
            </value>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">Information related to the event.</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Composite Application Library.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate"/> (the target) referenced by the current
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference"/> object.
            </summary>
            <value>
            <see langword="null"/> if the object referenced by the current
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference"/> object has been garbage collected; otherwise, 
            a reference to the <see cref="T:System.Delegate"/> referenced by the current 
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference"/> object.
            </value>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false"/> the class will create a weak reference
            to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong 
            reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed 
            <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.
            </exception>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventAggregator">
            <summary>
            Represents an event aggregation functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventAggregator.GetEvent``1">
            <summary>
            Gets an event of <see cref="!:TEventType"/>
            </summary>
            <typeparam name="TEventType">The type of an event to get</typeparam>
            <returns>An instance of got event</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase">
            <summary>
            Defines a base class to publish and subscribe to events
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions
            </summary>
            <value>
            The current subscribers
            </value>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase.Unsubscribe(YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <seealso cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/>
            </summary>
            <param name="token">The <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> returned by <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase"/> 
            while subscribing to the event</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase.Contains(YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/>
            </summary>
            <param name="token">The <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> returned by <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase"/> 
            while subscribing to the event</param>
            <returns>
            <see langword="true"/> if there is a <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that matches;
            otherwise <see langword="false"/>
            </returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase.InternalSubscribe(YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/> to the subscribers' collection
            </summary>
            <param name="eventSubscription">The subscriber</param>
            <returns>
            The <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/> that uniquely identifies every subscriber
            </returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/>
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of 
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>
            Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null"/><see cref="T:System.Action`1"/> when calling the
            <see cref="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription.GetExecutionStrategy"/> method.
            </remarks>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and
            <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference"/>.
            </summary>
            <value>
            An <see cref="T:System.Action`1"/> or <see langword="null"/> 
            if the referenced target is not alive.
            </value>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the 
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference"/>.
            </summary>
            <value>
            An <see cref="T:System.Predicate`1"/> or <see langword="null"/> if the referenced target 
            is not alive.
            </value>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.SubscriptionToken"/> that identifies this 
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/>.
            </summary>
            <value>
            A token that identifies this <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/>.
            </value>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.#ctor(YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference,YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> 
            are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.
            </exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>
            An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/> is no longer valid.
            </returns>
            <remarks>
            If <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Action"/> or <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>.
            The returned delegate holds hard references to the <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Action"/> and <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Action"/> and <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overriden.
            </summary>
            <param name="action">The action to execute.</param><param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param><exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate"/> object.
            
            </summary>
            
            <value>
            A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.
            </value>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IDispatcherFacade">
            <summary>
            Defines the interface for invoking methods through a Dispatcher Facade
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.IDispatcherFacade.BeginInvoke(System.Delegate,System.Object)">
            <summary>
            Dispatches an invocation to the method received as parameter.
            </summary>
            <param name="method">Method to be invoked.</param>
            <param name="arg">Arguments to pass to the invoked method.</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventAggregator">
            <summary>
            Exposes the event aggregator functionality that is responsible for locating or
            building events and for keeping a collection of the events in the system
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventAggregator.GetEvent``1">
            <summary>
            Gets an event of <see cref="!:TEventType"/>
            </summary>
            <typeparam name="TEventType">The type of an event to get</typeparam>
            <returns>An instance of got event</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription">
            <summary>
            Defines a contract for an event subscription to be used by 
            <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase"/>
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="P:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription.SubscriptionToken"/> that identifies this <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/>
            </summary>
            <value>
            A token that identifies this <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/>
            </value>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>
            An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/>
            if the <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.IEventSubscription"/> is no longer valid
            </returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken">
            <summary>
            Subscription token returned from <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.EventBase"/> on subscribe
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken.#ctor(System.Action{YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken})">
            <summary>
            Initializes a new instance of <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken.Equals(YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter;
            otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.EventAggregator.SubscriptionToken.OnDisposing">
            <summary>
            Does actual explicit disposal of available managed resources
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption">
            <summary>
            Specifies on which thread a <see cref="T:YP.Toolkit.System.Tools.Patterns.EventAggregator.CompositeEvent`1"/> subscriber will be called.
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption.PUBLISHER_THREAD">
            <summary>
            Indicates that event will be launched in publisher thread 
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Patterns.EventAggregator.ThreadOption.BACKGROUND_THREAD">
            <summary>
            Indicates that event will be launched in his own background thread 
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.AndSpecification`1">
            <summary>
            Joins two and more specifications in an 'And' condition.
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.AndSpecification`1.#ctor(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Initialise a new instance of the specification class that joins two specifications in an 'And' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="left">Left operand specification instance.</param>
            <param name="right">Right operand specification instance.</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.AndSpecification`1.#ctor(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0}[])">
            <summary>
            Initialise a new instance of the specification class that joins two an more specifications in an 'And' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specifications">The collection of specifications to composite in 'And' condition.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the collection of specifications is null.</exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.AndSpecification`1.#ctor(System.Collections.Generic.IEnumerable{YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0}})">
            <summary>
            Initialise a new instance of the specification class that joins two an more specifications in an 'And' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specifications">The collection of specifications to composite in 'And' condition.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the collection of specifications is null.</exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.AndSpecification`1.AccumulateExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Accumulates predicate over specifications sequence.
            </summary>
            <param name="predicate">Predicate for accumulation.</param>
            <param name="specification">Specification to accumulate with current <paramref name="predicate"/>predicate.</param>
            <returns>Resulting predicate.</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.CompositeSpecification`1">
            <summary>
            Represents abstract specification that joins two and more specifications in composition.
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.CompositeSpecification`1.#ctor(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0}[])">
            <summary>
            Initialise a new instance of the composite specification class.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specifications">The collection of specification to composite.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the collection of specifications is null.</exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.CompositeSpecification`1.#ctor(System.Collections.Generic.IEnumerable{YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0}})">
            <summary>
            Initialise a new instance of the composite specification class.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specifications">The collection of specification to composite.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the collection of specifications is null.</exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.CompositeSpecification`1.AccumulateExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Accumulates predicate over specifications sequence.
            </summary>
            <param name="predicate">Predicate for accumulation.</param>
            <param name="specification">Specification to accumulate with current <paramref name="predicate"/>predicate.</param>
            <returns>Resulting predicate.</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.Specification.CompositeSpecification`1.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.ExpressionExtensions">
            <summary>
            Represents class that comopsing lambda expressions
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Extension method for composing lambda expression to 'Or' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression1">Curernt expression to compose.</param>
            <param name="expression2">The expression to compose with.</param>
            <returns>Resulting expression</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Extension method for composing lambda expression to 'And' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression1">Curernt expression to compose.</param>
            <param name="expression2">The expression to compose with.</param>
            <returns>Resulting expression</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.ExpressionExtensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Extension method for composing lambda expression to 'Not' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression">Curernt expression to compose.</param>
            <returns>Resulting expression</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.NotSpecification`1">
            <summary>
            Represents specification with 'Not' condition.
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.NotSpecification`1.#ctor(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Initialise a new instance of the specification class that represents a 'Not' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specification">The specification to apply 'Not' condition.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when current specification is null.</exception>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.Specification.NotSpecification`1.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.OrSpecification`1">
            <summary>
            Joins two and more specifications in an 'Or' condition.
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.OrSpecification`1.#ctor(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Initialise a new instance of the specification class that joins two specifications in an 'Or' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="left">Left operand specification instance.</param>
            <param name="right">Right operand specification instance.</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.OrSpecification`1.#ctor(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0}[])">
            <summary>
            Initialise a new instance of the specification class that joins two an more specifications in an 'Or' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specifications">The collection of specifications to composite in 'Or' condition.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the collection of specifications is null.</exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.OrSpecification`1.#ctor(System.Collections.Generic.IEnumerable{YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0}})">
            <summary>
            Initialise a new instance of the specification class that joins two an more specifications in an 'Or' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <param name="specifications">The collection of specifications to composite in 'Or' condition.</param>
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the collection of specifications is null.</exception>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.OrSpecification`1.AccumulateExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Accumulates predicate over specifications sequence.
            </summary>
            <param name="predicate">Predicate for accumulation.</param>
            <param name="specification">Specification to accumulate with current <paramref name="predicate"/>predicate.</param>
            <returns>Resulting predicate.</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1">
            <summary>
            Use specification to make complex (business) logic explicit.
            For additional information visit - http://en.wikipedia.org/wiki/Specification_pattern
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.IsSatisfiedBy(`0)">
            <summary>
            Evaluates the predicate for a single entity.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException">Thrown when the <c>Predicate</c> is null.</exception>
            
            </summary>
            <param name="item">The item to examine.</param>
            <returns>A value that indicates whether entity is satisfeing current predicate.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.op_BitwiseOr(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Overrides 'Or' operator.
            </summary>
            <param name="left">Left operator operand.</param>
            <param name="right">Right operator operand.</param>
            <returns>A specification that represents 'Or' operator result.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.op_BitwiseAnd(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Overrides 'And' operator.
            </summary>
            <param name="left">Left operator operand.</param>
            <param name="right">Right operator operand.</param>
            <returns>A specification that represents 'And' operator result.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.op_LogicalNot(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Overrides 'Not' operator.
            </summary>
            <param name="specification">The specification to apply 'Not' operation to.</param>
            <returns>A specification that represents 'Not' operator result.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.op_Implicit(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})~System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}">
            <summary>
            Implicitly converts the specification instance to expression.
            </summary>
            <param name="specification">Current specification instance.</param>
            <returns>Resulting expression.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase`1.op_Implicit(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})~System.Func{`0,System.Boolean}">
            <summary>
            Implicitly converts the specification instance to delegate.
            </summary>
            <param name="specification">Current specification instance.</param>
            <returns>Resulting delegate.</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi">
            <summary>
            Represents class for implementing specification fluent API
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.And``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0})">
            <summary>
            Joins specifications in an 'And' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="current">Left operand specification instance.</param>
            <param name="right">Right operand specification instance.</param>
            <returns>Resulting specification.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.And``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0}[])">
            <summary>
            Joins specifications in an 'And' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="current">Left operand specification instance.</param>
            <param name="right">The collection of specification to join in an 'And' condition.</param>
            <returns>Resulting specification.</returns> 
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.Or``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0})">
            <summary>
            Joins specifications in an 'Or' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="left">Left operand specification instance.</param>
            <param name="right">Right operand specification instance.</param>
            <returns>Resulting specification.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.Or``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0}[])">
            <summary>
            Joins specifications in an 'Or' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="current">Left operand specification instance.</param>
            <param name="right">The collection of specification to join in an 'Or' condition.</param>
            <returns>Resulting specification.</returns> 
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.Not``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0})">
            <summary>
            Creates 'Not' condition specification from <paramref name="current"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="current">Current specification</param>
            <returns>Resulting specification</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.AndNot``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0})">
            <summary>
            Joins specifications in an 'AndNot' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="current">Left operand specification instance.</param>
            <param name="right">Right operand specification instance.</param>
            <returns>Resulting specification.</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Patterns.Specification.SpecificationFluentApi.OrNot``1(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0},YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{``0})">
            <summary>
            Joins specifications in an 'OrNot' condition.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SpecificationException"></exception>
            
            </summary>
            <typeparam name="T">The type of entity that is the subject of the specification.</typeparam>
            <param name="current">Left operand specification instance.</param>
            <param name="right">Right operand specification instance.</param>
            <returns>Resulting specification.</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerializableAttribute">
            <summary>
            Represents metadata that indicates whether the type can be binary serializable
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerializableMemberAttribute">
            <summary>
            Represents metadata that is indicated that a field or property could be binary serializable
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerializableMemberAttribute.Offset">
            <summary>
            Gets or sets the member offset for serialization
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerializableMemberAttribute.#ctor(System.UInt32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerializableMemberAttribute"/>
            </summary>
            <param name="offset">The offset of a member for serialization</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization">
            <summary>
            Represents entry point for binary serialization mechanism
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.ConfigurationMapping">
            <summary>
            Gets a collection of mapping information
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.Instance">
            <summary>
            Get an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization"/>.
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.#ctor(System.Collections.Generic.IDictionary{System.Type,YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization"/>
            </summary>
            <param name="mapping">Initial mapping collection</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.#ctor">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.Configure(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration)">
            <summary>
            Configurates binary serialization mechanism
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataRegistrationException"></exception>
            
            </summary>
            <param name="configuration">The configuration to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes a <see cref="!:value"/> into <see cref="!:stream"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="value">The object to serialize</param>
            <param name="stream">The stream to serialize object into</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.Serialize``1(``0,System.IO.Stream)">
            <summary>
            Serializes a <see cref="!:value"/> into <see cref="!:stream"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="value">The object to serialize</param>
            <param name="stream">The stream to serialize object into</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.DeserializeObjectOfType(System.Type,System.IO.Stream)">
            <summary>
            Deserializes an object from a <see cref="!:stream"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="objectType">The type of object to deserialize</param>
            <param name="stream">A stream to use to deserialize object from</param>
            <returns>The resulting instance of <see cref="!:objectType"/></returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes an object from a <see cref="!:stream"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="stream">A stream to use to deserialize object from</param>
            <returns>The resulting instance of <see cref="!:T"/></returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySerialization.GetMetadataForType(System.Type)">
            <summary>
            Gets a metadata for type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="type">The type to get metadata for</param>
            <returns>Found metadata</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySkipMemberAttribute">
            <summary>
            Represents metadata that is indicated that a field or property must be skipped during binary serialization
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySkipMemberAttribute.#ctor(System.UInt32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.BinarySkipMemberAttribute"/>
            </summary>
            <param name="offset">The offset of a member for serialization</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration">
            <summary>
            Represents a basic binary serialization configuration functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration.#ctor">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration.#ctor(System.Collections.Generic.IDictionary{System.Type,YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration"/>
            </summary>
            <param name="collection">The collection to store registered metadata</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration.RegisterMetadata(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder)">
            <summary>
            Registeres metadata with specific <see cref="!:metadataBuilder"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataRegistrationException"></exception>
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataAlreadyExistsException"></exception>
            
            </summary>
            <param name="metadataBuilder">The metadata builder</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.BinarySerializationConfiguration.GetConfiguratedMetadata">
            <summary>
            Gets a collection of metadata mapping data
            </summary>
            <returns>The collection of metadata mapping data</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.DeclarativeConfiguration">
            <summary>
            Represents declarative configuration for binary serialization
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.DeclarativeConfiguration.RegisterType``1">
            <summary>
            Registrates a type for binary serialization
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <typeparam name="T">The type to registrate for binary serialization</typeparam>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.IConfiguration">
            <summary>
            Exposes binary serialization configuration functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Configuration.IConfiguration.RegisterMetadata(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder)">
            <summary>
            Registeres metadata with specific <see cref="!:metadataBuilder"/>
            </summary>
            <param name="metadataBuilder">The metadata builder</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Helpers.TypeHelper">
            <summary>
            Represents type helper
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Helpers.TypeHelper.IsPrimitiveType(System.Type)">
            <summary>
            Gets a value that indicates whether a type is primitive
            </summary>
            <param name="type">The type to check</param>
            <returns>The value that indicates whether a type is primitive</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Helpers.TypeHelper.IsEnumerable(System.Type)">
            <summary>
            Gets a value that indicates whether a type is inherited from <see cref="T:System.Linq.Enumerable"/>
            </summary>
            <param name="type">The type to check</param>
            <returns>The value that indicates whether a type is inherited from <see cref="T:System.Linq.Enumerable"/></returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Helpers.TypeHelper.HasAttributeOf``1(System.Type)">
            <summary>
            Gets a value that indicates whether a type has attribute of type <see cref="!:T"/>
            </summary>
            <typeparam name="T">The type of attribute to check</typeparam>
            <param name="type">The type to check</param>
            <returns>The value that indicates whether a type has attribute of type <see cref="!:T"/></returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder">
            <summary>
            Represents a <see cref="T:System.Array"/> type metadata builder
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder"/>
            </summary>
            <param name="metadataBuilder">A metadata builder to use for elements of an array</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">A type to build metadata for</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="informationAccessor">The instance of information  accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ArrayTypeMetadataBuilder.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.CharTypeMetadataBuilder">
            <summary>
            Represents a <see cref="T:System.Char"/> metadata builder
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.CharTypeMetadataBuilder.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">A type to build metadata for</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.CharTypeMetadataBuilder.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="informationAccessor">The instance of information  accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.CharTypeMetadataBuilder.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.CharTypeMetadataBuilder.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeCustomTypeMetadataBuilder">
            <summary>
            Represents a declarative custom type metadata builder. 
            It can process ony referenced types for now
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeCustomTypeMetadataBuilder.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeCustomTypeMetadataBuilder.CreateTypeMetadataBuilder(System.Type)">
            <summary>
            Creates a metadata bulder for embedded custom type (the factory method pattern)
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">The type to create metadata builder for</param>
            <returns>The current metadata builder for the input type</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeCustomTypeMetadataBuilder.BuildMetadataForObjectType(System.Type)">
            <summary>
            Builds metadata for referenced type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">The type to build metadata for</param>
            <returns>Built metadata</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilder">
            <summary>
            Represents a common engine for building metadata declaratively
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilder.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilder.CreateTypeMetadataBuilder(System.Type)">
            <summary>
            Creates a metadata bulder for embedded custom type (the factory method pattern)
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">The type to create metadata builder for</param>
            <returns>The current metadata builder for the input type</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase">
            <summary>
            Represents declarative metadata builder, that gets information about type metadata using attributes
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            </summary>
            <param name="informationAccessor"></param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.CreateMemberCollection(System.Type)">
            <summary>
            Builds metadata members collection for type's members, such as fields and properties
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">The type to build metadata members collection for</param>
            <returns>Built metadata members collection</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.CreateTypeMetadataBuilder(System.Type)">
            <summary>
            Creates a metadata bulder for embedded custom type (the factory method pattern)
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">The type to create metadata builder for</param>
            <returns>The current metadata builder for the input type</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeMetadataBuilderBase.GetMetadataBuilder(System.Func{System.Type,System.Object},System.Type)">
            <summary>
            Gets a metadata builder for a type
            </summary>
            <param name="infoAccessor">The accessor delegate instance for access to the type value information</param>
            <param name="type">The type to get metadata builder for</param>
            <returns>The current metadata builder for a type</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.MemberSpecification">
            <summary>
            Represents a specification for checking whether the member could be binary serializable
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.MemberSpecification.#ctor">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.MemberSpecification"/>
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.MemberSpecification.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeFieldInfoMember`2">
            <summary>
            Represents a declarative field information obtainer
            </summary>
            <typeparam name="TAccessor">The type of the instance that provides the access to a field</typeparam>
            <typeparam name="TValue">The type of a field</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeFieldInfoMember`2.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeFieldInfoMember`2"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="fieldInfo">The field information to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativeFieldInfoMember`2.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativePropertyInfoMember`2">
            <summary>
            Represents a declarative property information obtainer
            </summary>
            <typeparam name="TAccessor">The type of the instance that provides the access to a property</typeparam>
            <typeparam name="TValue">The type of a property</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativePropertyInfoMember`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativePropertyInfoMember`2"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="propertyInfo">The property information to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.Declarative.DeclarativePropertyInfoMember`2.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.MemberMetadataBuilder">
            <summary>
            Represents a member metadata builder
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.MemberMetadataBuilder.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo,YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.MemberMetadataBuilder"/>
            </summary>
            <param name="memberInfo">The member information to use</param>
            <param name="successorMetadataBuilder">A succesor metadata builder to use</param>
            <param name="isSkipped">A value that indicates whether a value must be skipped during binary serialization</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.MemberMetadataBuilder.Build">
            <summary>
            Builds a metadata for a member
            </summary>
            <returns></returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder">
            <summary>
            Represents a generic collection type metadata builder
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder"/>
            </summary>
            <param name="metadataBuilder"></param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="informationAccessor">The instance of information  accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.GenericCollectionTypeMetadataBuilder.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ICharInfo">
            <summary>
            Exposes character information
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ICharInfo.Encoding">
            <summary>
            An encoding of a character
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ICollectionInfo">
            <summary>
            Exposes a collection information
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.ICollectionInfo.Length">
            <summary>
            Gets a length of a collection
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder">
            <summary>
            Exposes metadata builder functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">A type to build metadata for</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="informationAccessor">The instance of information  accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder.Build">
            <summary>
            Builds metadata for a type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Built metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IMetadataBuilder.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IStringInfo">
            <summary>
            Exposes a string information
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IStringInfo.Encoding">
            <summary>
            Gets an encoding of a string
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.IStringInfo.Length">
            <summary>
            Gets a length of a string
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.PrimitiveTypeMetadataBuilder">
            <summary>
            Represents a primitive type metadata builder
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.PrimitiveTypeMetadataBuilder.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">A type to build metadata for</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.PrimitiveTypeMetadataBuilder.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="informationAccessor">The instance of information  accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.PrimitiveTypeMetadataBuilder.Build">
            <summary>
            Build metadata for type
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <returns>Build metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.PrimitiveTypeMetadataBuilder.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.StringTypeMetadataBuilder">
            <summary>
            Represents a <see cref="T:System.String"/> type metadata builder
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.StringTypeMetadataBuilder.SetTypeToBuild(System.Type)">
            <summary>
            Sets a type to build metadata for
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="type">A type to build metadata for</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.StringTypeMetadataBuilder.SetInfoAccessor(System.Func{System.Type,System.Object})">
            <summary>
            Gets a type information accessor
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="informationAccessor">The instance of information  accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.StringTypeMetadataBuilder.Build">
            <summary>
            Build metadata for type
            </summary>
            <returns>Build metadata</returns>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.Builders.StringTypeMetadataBuilder.TypeToBuild">
            <summary>
            Gets a type to build metadata for
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2">
            <summary>
            Represents a base field information obtainer mechansm that is based on delegate access to a field
            </summary>
            <typeparam name="TAccessor"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataBuilderException"></exception>
            
            </summary>
            <param name="fieldInformation">The instance that represents a field information via .Net reflection mechanism</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.GetMemberType">
            <summary>
            Gets the type of a member
            </summary>
            <returns>The type of member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.GetValue(System.Object)">
            <summary>
            Gets the value of a member
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.SetValue(System.Object,`1)">
            <summary>
            Sets the value to an accessor
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.GetInfo``1">
            <summary>
            Gets the information of type <see cref="!:T"/>
            </summary>
            <typeparam name="T">Type of information to get</typeparam>
            <returns>Resulting information</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#IMemberInfo#GetValue(System.Object)">
            <summary>
            Gets the value of a member
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegateFieldInfoMember`2.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#IMemberInfo#SetValue(System.Object,System.Object)">
            <summary>
            Sets the value to an accessor
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2">
            <summary>
            Represents a base property information obtainer mechanism that is based on delegate access to a field
            </summary>
            <typeparam name="TAccessor"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.GetMemberType">
            <summary>
            Gets the type of a member
            </summary>
            <returns>The type of member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.GetValue(System.Object)">
            <summary>
            Gets the value of a member
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.SetValue(System.Object,`1)">
            <summary>
            Sets the value to an accessor
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#IMemberInfo#GetValue(System.Object)">
            <summary>
            Gets the value of a member
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#IMemberInfo#SetValue(System.Object,System.Object)">
            <summary>
            Sets the value to an accessor
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.GetInfo``1">
            <summary>
            Gets the information of type <see cref="!:T"/>
            </summary>
            <typeparam name="T">Type of information to get</typeparam>
            <returns>Resulting information</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.DelegatePropertyInfoMember`2.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo`1">
            <summary>
            Exposes member information basic functionality
            </summary>
            <typeparam name="TValue">A type of value</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo`1.GetValue(System.Object)">
            <summary>
            Gets the value of a member
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo`1.SetValue(System.Object,`0)">
            <summary>
            Sets the value to an accessor
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata">
            <summary>
            Exposes data metadata structure to serializable type
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata.Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata`1">
            <summary>
            Exposes data metadata structure to serializable type
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata`1.Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ITypeInfo">
            <summary>
            Exposes a mechanism for obtaining a type information
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ITypeInfo.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember">
            <summary>
            Represents field information as member
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember"/>
            
            
            <exception cref="T:System.NullReferenceException"></exception>
            
            </summary>
            <param name="fieldInfo">The field information to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember.GetMemberType">
            <summary>
            Gets the type of a member
            </summary>
            <returns>The type of member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember.GetValue(System.Object)">
            <summary>
            Gets the value of a member
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value to an accessor
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember.GetInfo``1">
            <summary>
            Gets the information of type <see cref="!:T"/>
            </summary>
            <typeparam name="T">Type of information to get</typeparam>
            <returns>Resulting information</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.FieldInfoMember.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo">
            <summary>
            Exposes member information basic functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo.GetMemberType">
            <summary>
            Gets the type of a member
            </summary>
            <returns>The type of member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo.GetValue(System.Object)">
            <summary>
            Gets the value of a member
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value to an accessor
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo.GetInfo``1">
            <summary>
            Gets the information of type <see cref="!:T"/>
            </summary>
            <typeparam name="T">Type of information to get</typeparam>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMetadata">
            <summary>
            Exposes a data information
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMetadata.Capacity">
            <summary>
            Gets a size of type in bytes
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMetadata.ValueType">
            <summary>
            Gets a type that a metadata is assosiated with
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata">
            <summary>
            Represents serializable member's metadata
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ISerializableTypeMetadata,YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.IMemberInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata"/>
            </summary>
            <param name="memberMetadata">The inner data metadata to use</param>
            <param name="memberInfo">The information of a member to serialize</param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.MemberInfo">
            <summary>
            Gets the information of member that is under metadata
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.SuccessorMetadata">
            <summary>
            Gets the successor metadata
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.Capacity">
            <summary>
            Gets a size of type in bytes
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.ValueType">
            <summary>
            Gets a type that a metadata is assosiated with
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata.SetSerializer(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.MemberMetadataSerializer)">
            <summary>
            Sets a serializer to use
            </summary>
            <param name="serializer">An instance of serializer to use</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1">
            <summary>
            Represents object metadata
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata[],System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataException"></exception>
            
            </summary>
            <param name="collection">The collection of object members</param>
            <param name="capacity"></param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1.Members">
            <summary>
            Gets the collection of object members
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1.Capacity">
            <summary>
            Gets a size of type in bytes
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1.ValueType">
            <summary>
            Gets a type that a metadata is assosiated with
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#ISerializableTypeMetadata#Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1.Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember">
            <summary>
            Represents property information as member
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember"/>
            </summary>
            <param name="propertyInfo">The property information to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember.GetMemberType">
            <summary>
            Gets the type of a member
            </summary>
            <returns>The type of member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember.GetValue(System.Object)">
            <summary>
            Gets the value of a member
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to get value from</param>
            <returns>The value accepted from the value accessor</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value to an accessor
            
            
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            
            </summary>
            <param name="valueAccessor">The accessor to set value to</param>
            <param name="value">The value to set to accessor</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember.GetInfo``1">
            <summary>
            Gets the information of type <see cref="!:T"/>
            </summary>
            <typeparam name="T">Type of information to get</typeparam>
            <returns>Resulting information</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.PropertyInfoMember.GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata">
            <summary>
            Represents a serializable type metadata
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer,System.Type,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata"/>
            </summary>
            <param name="serializer">An instance of a serializer to use</param>
            <param name="type">A type that a metadata is assosiated with</param>
            <param name="capacity">A size of type in bytes</param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata.Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata.ValueType">
            <summary>
            Gets a type that a metadata is assosiated with
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata.Capacity">
            <summary>
            Gets a size of type in bytes
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata`1.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer{`0},System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata`1"/>
            </summary>
            <param name="serializer">The serializer to use</param>
            <param name="capacity">Capacity of type</param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.SerializableTypeMetadata`1.Serializer">
            <summary>
            Gets a serializer for a member to serialize
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CharInfoAttribute">
            <summary>
            Represents a character information attribute
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CharInfoAttribute.EncodingType">
            <summary>
            Gets a type of character encoding
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CharInfoAttribute.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#Builders#ICharInfo#Encoding">
            <summary>
            An encoding of a character
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CharInfoAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CharInfoAttribute"/>
            </summary>
            <param name="encodingType">A type of a character encosing</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CollectionInfoAttribute">
            <summary>
            Represents a collection information attribute
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CollectionInfoAttribute.ElementTypeInfoAccessor">
            <summary>
            Gets or sets a type of a type information accessor 
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CollectionInfoAttribute.#ctor(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CollectionInfoAttribute"/>
            </summary>
            <param name="length">The length of a collection</param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CollectionInfoAttribute.Length">
            <summary>
            Gets a length of a collection
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.CollectionInfoAttribute.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#ITypeInfo#GetInfo(System.Type)">
            <summary>
            Gets the information of member
            </summary>
            <param name="infoType">The type of information to get</param>
            <returns>Resulting information</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StringInfoAttribute">
            <summary>
            Represents a string information attribute
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StringInfoAttribute.EncodingType">
            <summary>
            Gets a type of a string encoding
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StringInfoAttribute.#ctor(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StringInfoAttribute"/>
            </summary>
            <param name="length">The length of a string</param>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StringInfoAttribute.Length">
            <summary>
            Gets a length of a string
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StringInfoAttribute.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Metadata#Builders#IStringInfo#Encoding">
            <summary>
            Gets an encoding of a string
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.BooleanSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.BooleanSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Boolean)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.BooleanSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.BooleanSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ByteSerializer">
            <summary>
            Represents <see cref="T:System.Byte"/> value serializer
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ByteSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ByteSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Byte)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ByteSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ByteSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CharSerializer.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CharSerializer"/>
            </summary>
            <param name="capacity">A capacity of a char</param>
            <param name="encoding"></param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CharSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CharSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Char)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CharSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CharSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CollectionSerializer`1.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.CollectionSerializer`1.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int16Serializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int16Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Int16)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int16Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int16Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int32Serializer">
            <summary>
            Represents serializer that can only serialize/deserialize <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int32Serializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int32Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Int32)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int32Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int32Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer">
            <summary>
            Exposes serializer functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int64Serializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int64Serializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int64Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Int64)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int64Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.Int64Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer`1">
            <summary>
            Exposes serializer functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer`1.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,`0)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ISerializer`1.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.MemberMetadataSerializer">
            <summary>
            Represents a member metadata serializer
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.MemberMetadataSerializer.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.MemberMetadataSerializer"/>
            </summary>
            <param name="memberMetadata">An instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata"/> to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.MemberMetadataSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a member's value
            </summary>
            <param name="writer">An instance of binary writer to use</param>
            <param name="accessor">An instance of an object to get value from</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.MemberMetadataSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader,System.Object)">
            <summary>
            Deserializes a value for a member
            </summary>
            <param name="reader">An instance of binary reader to use</param>
            <param name="accessor">An instance of an object to set value to</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1">
            <summary>
            Represents object serializer functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata{`0})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1"/>
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.MetadataException"></exception>
            
            </summary>
            <param name="metadata">The instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.ReferencedTypeMetadata`1"/> to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,`0)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.ObjectSerializer`1.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SByteSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SByteSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.SByte)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SByteSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SByteSerializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SerializerMessanger">
            <summary>
            Represents serializer messsanger
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SerializerMessanger.NULL_WRITER_MESSAGE">
            <summary>
            Null writer detected message
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SerializerMessanger.NULL_READER_MESSAGE">
            <summary>
            Null reader detected message
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SerializerMessanger.NULL_OBJECT_TO_SERIALIZE_MESSAGE">
            <summary>
            Null object while serialization detected message
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SerializerMessanger.UNEXPECTED_SERIALIZATION_EXCEPTION_MESSAGE">
            <summary>
            Unexpected error while serialization message
            </summary>
        </member>
        <member name="F:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SerializerMessanger.UNEXPECTED_DESERIALIZATION_EXCEPTION_MESSAGE">
            <summary>
            Unexpected error while deserialization message
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SkippedMemberMetadataSerializer">
            <summary>
            Represents a member metadata serializer
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SkippedMemberMetadataSerializer.#ctor(YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SkippedMemberMetadataSerializer"/>
            </summary>
            <param name="memberMetadata">An instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Metadata.MemberMetadata"/> to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SkippedMemberMetadataSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a member's value
            </summary>
            <param name="writer">An instance of binary writer to use</param>
            <param name="accessor">An instance of an object to get value from</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.SkippedMemberMetadataSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader,System.Object)">
            <summary>
            Deserializes a value for a member
            </summary>
            <param name="reader">An instance of binary reader to use</param>
            <param name="accessor">An instance of an object to set value to</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.StringSerializer">
            <summary>
            Represents <see cref="T:System.String"/> value serializer
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.StringSerializer.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.StringSerializer"/>
            </summary>
            <param name="capacity">Length of string to serialize</param>
            <param name="encoding">Encoding of string to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.StringSerializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.StringSerializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt16Serializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt16Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.UInt16)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt16Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt16Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt32Serializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt32Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.UInt32)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt32Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt32Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt64Serializer.Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt64Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.UInt64)">
            <summary>
            Serializes a value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt64Serializer.Serialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter,System.Object)">
            <summary>
            Serializes a value to output stream
            </summary>
            <param name="writer">The write to which value to serialize</param>
            <param name="value">The value to serialize</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.Serializers.UInt64Serializer.YP#Toolkit#System#Tools#Serializers#BinarySerializer#Serializers#ISerializer#Deserialize(YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader)">
            <summary>
            Deserializes a value from input stream
            </summary>
            <param name="reader">The reader to use in order to get value</param>
            <returns>Deserializable value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer">
            <summary>
            Represents a binary buffer functionality
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.Data">
            <summary>
            Gets byte array, which contains information about serializable object
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.#ctor(System.Byte[])">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer"/>.
            
            
            <exception cref="T:System.Exception"></exception>
            
            </summary>
            <param name="stream">Array of bytes to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadByte">
            <summary>
            Reads <see cref="T:System.Byte"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadSByte">
            <summary>
            Reads <see cref="T:System.SByte"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadInt16">
            <summary>
            Reads <see cref="T:System.Int16"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadUInt16">
            <summary>
            Reads <see cref="T:System.UInt16"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadInt32">
            <summary>
            Reads <see cref="T:System.Int32"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadUInt32">
            <summary>
            Reads <see cref="T:System.UInt32"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadInt64">
            <summary>
            Reads <see cref="T:System.Int64"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadUInt64">
            <summary>
            Reads <see cref="T:System.UInt64"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadUnicodeChar(System.Text.Encoding)">
            <summary>
            Reads <see cref="T:System.Char"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadChar">
            <summary>
            Reads <see cref="T:System.Char"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads <see cref="T:System.String"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="capacity">Length of <see cref="T:System.String"/> value</param>
            <param name="encoding">Encoding of string</param>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.ReadBoolean">
            <summary>
            Reads <see cref="T:System.Boolean"/> from array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteByte(System.Byte)">
            <summary>
            Writes <see cref="T:System.Byte"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteSByte(System.SByte)">
            <summary>
            Writes <see cref="T:System.SByte"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteInt16(System.Int16)">
            <summary>
            Writes <see cref="T:System.Int16"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteUInt16(System.UInt16)">
            <summary>
            Writes <see cref="T:System.UInt16"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteInt32(System.Int32)">
            <summary>
            Writes <see cref="T:System.Int32"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
             
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteUInt32(System.UInt32)">
            <summary>
            Writes <see cref="T:System.UInt32"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteInt64(System.Int64)">
            <summary>
            Writes <see cref="T:System.Int64"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteUInt64(System.UInt64)">
            <summary>
            Writes <see cref="T:System.UInt64"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteUnicodeChar(System.Char,System.Text.Encoding)">
            <summary>
            Writes <see cref="T:System.Char"/> value to output stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteChar(System.Char)">
            <summary>
            Writes <see cref="T:System.Char"/> value to output stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.Skip(System.Int32)">
            <summary>
            Skips a namuber of bytes
            </summary>
            <param name="bytesToSkip">A number of bytes to skip</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteString(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes <see cref="T:System.String"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
            <param name="capacity">Capacity of <see cref="T:System.String"/> value</param>
            <param name="encoding">Encoding of string</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.WriteBoolean(System.Boolean)">
            <summary>
            Writes <see cref="T:System.Boolean"/> value to array of bytes
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetInt16FromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.Int16"/> value
            </summary>
            <returns><see cref="T:System.Int16"/> value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetUInt16FromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.UInt16"/> value
            </summary>
            <returns><see cref="T:System.UInt16"/> value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetInt32FromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.Int32"/> value
            </summary>
            <returns><see cref="T:System.Int32"/> value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetUInt32FromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.UInt32"/> value
            </summary>
            <returns><see cref="T:System.UInt32"/> value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromInt32(System.Int32)">
            <summary>
            Convert <see cref="T:System.Int32"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromUInt32(System.UInt32)">
            <summary>
            Convert <see cref="T:System.UInt32"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromInt64(System.Int64)">
            <summary>
            Convert <see cref="T:System.Int64"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromUInt64(System.UInt64)">
            <summary>
            Convert <see cref="T:System.UInt64"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetInt64FromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.Int64"/> value
            </summary>
            <returns><see cref="T:System.Int64"/> value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetUInt64FromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.UInt64"/> value
            </summary>
            <returns><see cref="T:System.UInt64"/> value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromInt16(System.Int16)">
            <summary>
            Convert <see cref="T:System.Int16"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromUInt16(System.UInt16)">
            <summary>
            Convert <see cref="T:System.UInt16"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBytesFromBoolean(System.Boolean)">
            <summary>
            Convert <see cref="T:System.Boolean"/> value to array of bytes
            </summary>
            <param name="value">Value to convert</param>
            <returns>Array of bytes</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.BinaryBuffer.GetBooleanFromBytes">
            <summary>
            Convert array of bytes to <see cref="T:System.Boolean"/> value
            </summary>
            <returns><see cref="T:System.Boolean"/> value</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader">
            <summary>
            Exposes binary reader functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadInt32">
            <summary>
            Reads <see cref="T:System.Int32"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadByte">
            <summary>
            Reads <see cref="T:System.Byte"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads <see cref="T:System.String"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadInt64">
            <summary>
            Reads <see cref="T:System.Int64"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadInt16">
            <summary>
            Reads <see cref="T:System.Int16"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadBoolean">
            <summary>
            Reads <see cref="T:System.Boolean"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadSByte">
            <summary>
            Reads <see cref="T:System.SByte"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadUInt16">
            <summary>
            Reads <see cref="T:System.UInt16"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadUInt32">
            <summary>
            Reads <see cref="T:System.UInt32"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadUInt64">
            <summary>
            Reads <see cref="T:System.UInt64"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadUnicodeChar(System.Text.Encoding)">
            <summary>
            Reads <see cref="T:System.Char"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.ReadChar">
            <summary>
            Reads <see cref="T:System.Char"/> from inputed stream
            
            
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
            
            
            </summary>
            <returns>Read value</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryReader.Skip(System.Int32)">
            <summary>
            Skips a namuber of bytes
            </summary>
            <param name="bytesToSkip">A number of bytes to skip</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter">
            <summary>
            Exposes binary stream writer
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteInt32(System.Int32)">
            <summary>
            Writes <see cref="T:System.Int32"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteByte(System.Byte)">
            <summary>
            Writes <see cref="T:System.Byte"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteString(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes <see cref="T:System.String"/> value to output stream.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
            <param name="length">The length of string</param>
            <param name="encoding">Encoding of string</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteInt64(System.Int64)">
            <summary>
            Writes <see cref="T:System.Int64"/> value to output stream.
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteInt16(System.Int16)">
            <summary>
            Writes <see cref="T:System.Int16"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes <see cref="T:System.Boolean"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteSByte(System.SByte)">
            <summary>
            Writes <see cref="T:System.SByte"/> value to output stream
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes <see cref="T:System.UInt16"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes <see cref="T:System.UInt32"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes <see cref="T:System.UInt64"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
            <param name="value">The value to write</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteUnicodeChar(System.Char,System.Text.Encoding)">
            <summary>
            Writes <see cref="T:System.Char"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.WriteChar(System.Char)">
            <summary>
            Writes <see cref="T:System.Char"/> value to output stream
            
            
            <exception cref="T:YP.Toolkit.System.Exceptions.SerializationException"></exception>
            
            
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.Serializers.BinarySerializer.StreamWrapper.IBinaryWriter.Skip(System.Int32)">
            <summary>
            Skips a namuber of bytes
            </summary>
            <param name="bytesToSkip">A number of bytes to skip</param>
        </member>
        <member name="T:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection">
            <summary>
            Represents strongly type reflection mechanism
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers">
            <summary>
            Represents access for strongly type reflection to static members
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Field``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the System.Reflection.FieldInfo instance for current expression member
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current expression member to get System.Reflection.FieldInfo instance from</param>
            <returns>System.Reflection.FieldInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the System.Reflection.PropertyField instance for current expression member
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current expression member to get System.Reflection.PropertyInfo instance from</param>
            <returns>System.Reflection.PropertyInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <param name="member">The current expression member to get System.Reflection.MethodInfo instance from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current expression member to get System.Reflection.MethodInfo instance from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current expression member to get System.Reflection.MethodInfo instance from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current axpression member to get System.Reflection.MethodInfo instance from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current axpression member to get System.Reflection.MethodInfo instnace from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current axpression member to get System.Reflection.MethodInfo instnace from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.StaticMembers.Method``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <param name="member">The current axpression member to get System.Reflection.MethodInfo instnace from</param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1">
            <summary>
            Represents access for strongly type reflection to instance members
            </summary>
            <typeparam name="TMember">The type of instance to get members from</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the System.Reflection.FieldInfo instance for current expression member
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.FieldInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the System.Reflection.PropertyField instance for current expression member
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.PropertyInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method``4(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2,``3}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method``5(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2,``3,``4}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.InstanceOf`1.Method``6(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            Gets the System.Reflection.MethodInfo instance for current expression member
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the forth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <param name="member"></param>
            <returns>System.Reflection.MethodInfo instance for current expression member</returns>
        </member>
        <member name="T:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.MemberNameValuePair`1">
            <summary>
            Represents the name-value pair for strongly type reflection members 
            (Only for fields, method parameters and properties)
            </summary>
            <typeparam name="T">The type of value of the strongly type reflection member</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.MemberNameValuePair`1.Name">
            <summary>
            The name of the strongly type reflection member
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.MemberNameValuePair`1.Value">
            <summary>
            The value of the strongly type reflection member
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.MemberNameValuePair`1.#ctor(System.String,`0)">
            <summary>
            Initializes the instance of <see cref="T:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.MemberNameValuePair`1"/>
            </summary>
            <param name="name">The name of the strongly type reflection member</param>
            <param name="value">The value of the strongly type reflection member</param>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of a code token using strongly type reflection
            </summary>
            <typeparam name="T">The type of value represents by a code token</typeparam>
            <param name="member">The code token to get the name as expression instance</param>
            <returns>The name of a code token</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of a code token using strongly type reflection
            </summary>
            <typeparam name="TMember">The type of instance that contains current code token</typeparam>
            <typeparam name="T">The type of value represents by a code token</typeparam>
            <param name="member">The code token to get the name as expression instance</param>
            <returns>The name of a code token</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.GetMemberName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the name of a code token using strongly type reflection
            </summary>
            <typeparam name="T">The type of value represents by a code token</typeparam>
            <param name="member">The code token to get the name as expression instance</param>
            <returns>The name of a code token</returns>
        </member>
        <member name="M:YP.Toolkit.System.Tools.StrongTypedReflection.StrongTypeReflection.GetMemberNameValuePair``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name-value pair of a code token using strongly type reflection
            </summary>
            <typeparam name="T">The type of value represents by a code token</typeparam>
            <param name="member">The code token to get the name as expression instance</param>
            <returns>The name-value pair of a code token</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.Guard">
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
            <summary>
            Represents guardian for common used validation rules
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``1(System.Type)">
            <summary>
            Invokes assignability validation rule.
            If a type of value is assignable to type of <see cref="!:TTypeToCheck"/> throwing ArgumentException.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <param name="checkableType">Checkable type</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``1(System.Type,System.Exception)">
            <summary>
            Invokes assignability validation rule.
            If a type of value is assignable from type of <see cref="!:TTypeToCheck"/> throwing a custom Exception.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``1(System.Type,System.String)">
            <summary>
            Invokes assignability validation rule.
            If a type of value is assignable from type of <see cref="!:TTypeToCheck"/> throwing an ArgumentNullException.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``2(System.Type)">
            <summary>
            Invokes assignability validation rule.
            If a type of value is assignable from type of <see cref="!:TTypeToCheck"/> throwing a <see cref="!:TException"/>.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="checkableType">Checkable Type</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``2(System.Type,System.String)">
            <summary>
            Invokes assignability validation rule.
            If a type of value is assignable from type of <see cref="!:TTypeToCheck"/> throwing a <see cref="!:TException"/> with exception message.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``2(System.Type,System.String,System.String)">
            <summary>
            Invokes assignability validation rule.
            If a type of value is assignable from type of <see cref="!:TTypeToCheck"/> throwing a <see cref="!:TException"/> and exception message.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Invokes assignability validation rule.
            If a type of first parameter is assignable from type of second parameter of function throwing a custom exception.
            </summary>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom(System.Type,System.Type,System.Exception)">
            <summary>
            Invokes assignability validation rule.
            If a type of first parameter is assignable from type of second parameter of function throwing a custom exception.
            </summary>
            <param name="checkingType">Chaeckable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom(System.Type,System.Type,System.String)">
            <summary>
            Invokes assignability validation rule.
            If a type of first parameter is assignable from type of second parameter of function throwing an ArgumentNullException.
            </summary>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``1(System.Type,System.Type)">
            <summary>
            Invokes assignability validation rule.
            If a type of first parameter is assignable from type of second parameter of function throwing a <see cref="!:TException"/>. 
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``1(System.Type,System.Type,System.String)">
            <summary>
            Invokes assignability validation rule.
            If a type of first parameter is assignable from type of second parameter of function throwing a <see cref="!:TException"/> with exception message. 
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsAssignableFrom``1(System.Type,System.Type,System.String,System.String)">
            <summary>
            Invokes assignability validation rule.
            If a type of first parameter is assignable from type of second parameter of function throwing a <see cref="!:TException"/> with exception message and with inner exception ArgumentNullException. 
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Exception)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a <see cref="!:TException"/>.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a <see cref="!:TException"/>.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a <see cref="!:TException"/> and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a <see cref="!:TException"/> and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a <see cref="!:TException"/>, exception message and inner exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyNotEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            /// Invokes collection consequentially inequality validation rule.
            If collections are consequentially not equals to each other throwing a <see cref="!:TException"/>, exception message and inner exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to chec</param>
            <param name="secondCollection">Collection to chec</param>
            <param name="comparer">A comparer to use</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse(System.Boolean,System.Exception)">
            <summary>
            Invokes false validation rule.
            If boolean value is false throwing a custom exception.
            </summary>
            <param name="value">The boolean value to validate</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse(System.Boolean,System.String)">
            <summary>
            Invokes false validation rule.
            If boolean value is false throwing a ArgumentNullException exception.
            </summary>
            <param name="value">The boolean value to validate</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse(System.Boolean)">
            <summary>
            Invokes false validation rule.
            If boolean value is false throwing ArgumentException exception.
            </summary>
            <param name="value">The boolean value to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse``1(System.Boolean)">
            <summary>
            Invokes false validation rule.
            If boolean value is false an <see cref="!:T"/> will be thrown.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse``1(System.Boolean,System.String)">
            <summary>
            Invokes false validation rule.
            If boolean value is false an <see cref="!:T"/> will be thrown.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse``1(System.Boolean,System.String,System.String)">
            <summary>
            Invokes false validation rule.
            If a value is false an <see cref="!:T"/> will be thrown with <see cref="T:System.ArgumentNullException"/> as inner.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsFalse``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Invokes false validation rule.
            If value is false a <see cref="!:T"/> will be thrown with <see cref="T:System.Exception"/> as inner.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
            <param name="message">The exception message</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes empty collection validation rule and if the rule is not valid <see cref="T:System.ArgumentException"/> will be thrown.
            </summary>
            <typeparam name="T">The type of the collection items</typeparam>
            <param name="collection">The collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyCollection``1(System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Invokes empty collection validation rule and if the rule is not valid a custom exception will be thrown.
            </summary>
            <typeparam name="T">The type of the collection items</typeparam>
            <param name="collection">The collection to check</param>
            <param name="exception">Custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes empty collection validation rule on a method parameter.
            If a parameter value is not valid a <see cref="T:System.ArgumentNullException"/> will be thrown.
            </summary>
            <typeparam name="T">The type of the collection items</typeparam>
            <param name="collection">A method parameter value to check</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyCollection``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes empty collection validation rule on an collection.
            If the collection is empty an <see cref="!:TException"/> will be thrown.
            </summary>
            <typeparam name="TItem">The type of collection item</typeparam>
            <typeparam name="TException">The type of excetpion to throw</typeparam>
            <param name="collection">The collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyCollection``2(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes empty collection validation rule on an collection.
            If the collection is empty an <see cref="!:TException"/> will be thrown.
            </summary>
            <typeparam name="TItem">The type of collection item</typeparam>
            <typeparam name="TException">The type of excetpion to throw</typeparam>
            <param name="collection">The collection to check</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyCollection``2(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Invokes empty collection validation rule on an collection.
            If the collection is empty an <see cref="!:TException"/> will be thrown with <see cref="T:System.ArgumentNullException"/> as inner.
            </summary>
            <typeparam name="TItem">The type of collection item</typeparam>
            <typeparam name="TException">The type of excetpion to throw</typeparam>
            <param name="collection">The collection to check</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyOrNullItemCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes empty collection validation rule and if the rule is not valid <see cref="T:System.ArgumentException"/> will be thrown.
            </summary>
            <typeparam name="T">The type of the collection items</typeparam>
            <param name="collection">The collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyOrNullItemCollection``1(System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Invokes empty collection or collection with null item validation rule and if the rule is not valid a custom exception will be thrown.
            </summary>
            <typeparam name="T">The type of the collection items</typeparam>
            <param name="collection">The collection to check</param>
            <param name="exception">Custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyOrNullItemCollection``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes empty collection or collection with null item validation rule on a method parameter.
            If a parameter value is not valid a <see cref="T:System.ArgumentNullException"/> will be thrown.
            </summary>
            <typeparam name="T">The type of the collection items</typeparam>
            <param name="collection">A method parameter value to check</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyOrNullItemCollection``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes empty collection or collection with null item validation rule on an collection.
            If the collection is empty or contains null item an <see cref="!:TException"/> will be thrown.
            </summary>
            <typeparam name="TItem">The type of collection item</typeparam>
            <typeparam name="TException">The type of excetpion to throw</typeparam>
            <param name="collection">The collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyOrNullItemCollection``2(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes empty collection or collection with null item validation rule on an collection.
            If the collection is empty or contains null item an <see cref="!:TException"/> will be thrown.
            </summary>
            <typeparam name="TItem">The type of collection item</typeparam>
            <typeparam name="TException">The type of excetpion to throw</typeparam>
            <param name="collection">The collection to check</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyOrNullItemCollection``2(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Invokes empty collection or collection with null item validation rule on an collection.
            If the collection is empty or contains null item an <see cref="!:TException"/> will be thrown with <see cref="T:System.ArgumentException"/> as inner.
            </summary>
            <typeparam name="TItem">The type of collection item</typeparam>
            <typeparam name="TException">The type of excetpion to throw</typeparam>
            <param name="collection">The collection to check</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``1(``0,``0)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an ArgumentException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an ArgumentException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="right">Value of object to validate</param>
            <param name="left">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``1(``0,``0,System.Exception)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Exception)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="right">Value of object to validate</param>
            <param name="left">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``1(``0,``0,System.String)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an ArgumentNullException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an ArgumentNullException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``2(``0,``0)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing a <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``2(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="right">Value of object to validate</param>
            <param name="left">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``2(``0,``0,System.String)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``2(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``2(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an <see cref="!:TException"/> exception and with inner exception ArgumentNullException and with exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEqualityOfValues``2(``0,``0,System.String,System.String)">
            <summary>
            Invokes equality validation rule.
            If objects are equals throwing an <see cref="!:TException"/> exception and with inner exception ArgumentNullException and with exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.Throw``1(``0)">
            <summary>
            Throws exception
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="exception">Exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.Throw``1(System.String)">
            <summary>
            Throws exception
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.Throw``1(System.String,System.Exception)">
            <summary>
            Throws exception
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception of current exception</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.Throw``1">
            <summary>
            Throws custom excetion
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``1(``0,``0)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``1(``0,``0,System.Exception)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.Exception)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``2(``0,``0)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``2(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``2(``0,``0,System.String)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.String)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterThan``2(``0,``0,System.String,System.String)">
            <summary>
            Invokes value is greater than another validation rule.
            If first parameter is greater than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``1(``0,``0)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``1(``0,``0,System.Exception)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.Exception)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``1(``0,``0,System.String)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``2(``0,``0)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``2(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``2(``0,``0,System.String)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.String)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsGreaterOrEqualsThan``2(``0,``0,System.String,System.String)">
            <summary>
            Invokes value is greater or equals than another validation rule.
            If first parameter is greater of equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``1(``0,``0,``0)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range thrwowing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``1(``0,``0,``0,System.Exception)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.Exception)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Right border of range</param>
            <param name="rightBorder">Left border of range</param>
            <param name="comparer">A comparer to use</param>
            <param name="exception">The custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Right border of range</param>
            <param name="rightBorder">Left border of range</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``2(``0,``0,``0)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to validate</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``2(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to validate</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Cmparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``2(``0,``0,``0,System.String)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right vorder of range</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``2(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``2(``0,``0,``0,System.String,System.String)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a <see cref="!:TException"/> exception, with inner exception ArgumentNullException and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsInRange``2(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.String)">
            <summary>
            Invokes value is in range validation rule.
            If value is in range throwing a <see cref="!:TException"/> exception, with inner exception ArgumentNullException and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A metjod parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``1(``0,``0)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``1(``0,``0,System.Exception)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.Exception)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``1(``0,``0,System.String)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``2(``0,``0)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``2(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``2(``0,``0,System.String)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.String)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessThan``2(``0,``0,System.String,System.String)">
            <summary>
            Invokes value is less than another validation rule.
            If first parameter is less than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``1(``0,``0)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``1(``0,``0,System.Exception)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.Exception)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``1(``0,``0,System.String)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``2(``0,``0)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``2(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``2(``0,``0,System.String)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``2(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.String)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsLessOrEqualsThan``2(``0,``0,System.String,System.String)">
            <summary>
            Invokes value is less or equals than another validation rule.
            If first parameter is less or equals than second parameter throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="valueForCompare">Value of object to compare</param>
            <param name="value">Value of object to compare</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNegatives(System.Int32)">
            <summary>
            Invokes negative value validation rule and if the rule is not valid will throw <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="value">The value to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNegatives(System.Int32,System.String)">
            <summary>
            Invokes negative value validation rule and if the rule is not valid will throw <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="value">The value to check</param>
            <param name="parameterName">The name of a parameter to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNegatives(System.Int32,System.Exception)">
            <summary>
            Invokes negative value validation rule and if the rule is not valid will throw custom exception.
            </summary>
            <param name="value">The value to check</param>
            <param name="exception">Custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNegatives``1(System.Int32)">
            <summary>
            Invokes negative value validation rule on an <see cref="T:System.Int32"/>.
            If a value is negative an <see cref="!:T"/> will be thrown.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The value to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNegatives``1(System.Int32,System.String)">
            <summary>
            Invokes negative value validation rule on an <see cref="T:System.Int32"/>.
            If a value is negative an <see cref="!:T"/> will be thrown.
            </summary>
            <param name="value">The value to check</param>
            <param name="message">The exception message</param>
            <typeparam name="T">The type of exception to throw</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNegatives``1(System.Int32,System.String,System.String)">
            <summary>
            Invokes negative value validation rule on an <see cref="T:System.Int32"/>.
            If a value is negative an <see cref="!:T"/> will be thrown with <see cref="T:System.ArgumentNullException"/> as inner.
            </summary>
            <param name="value">The value to check</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">The exception message</param>
            <typeparam name="T">The type of exception to throw</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``1(System.Type)">
            <summary>
            Invokes ininassignability validation rule.
            If a type of value is not assignable to type of <see cref="!:TTypeToCheck"/> throwing ArgumentException.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <param name="checkableType">Checkable type</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``1(System.Type,System.Exception)">
            <summary>
            Invokes ininassignability validation rule.
            If a type of value is not assignable from type of <see cref="!:TTypeToCheck"/> throwing a custom Exception.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``1(System.Type,System.String)">
            <summary>
            Invokes ininassignability validation rule.
            If a type of value is not assignable from type of <see cref="!:TTypeToCheck"/> throwing an ArgumentNullException.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``2(System.Type)">
            <summary>
            Invokes ininassignability validation rule.
            If a type of value is not assignable from type of <see cref="!:TTypeToCheck"/> throwing a <see cref="!:TException"/>.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="checkableType">Checkable Type</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``2(System.Type,System.String)">
            <summary>
            Invokes ininassignability validation rule.
            If a type of value is not assignable from type of <see cref="!:TTypeToCheck"/> throwing a <see cref="!:TException"/> with exception message.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``2(System.Type,System.String,System.String)">
            <summary>
            Invokes ininassignability validation rule.
            If a type of value is not assignable from type of <see cref="!:TTypeToCheck"/> throwing a <see cref="!:TException"/> and exception message.
            </summary>
            <typeparam name="TTypeToCheck">Type to check with</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="checkableType">Checkable type</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom(System.Type,System.Type)">
            <summary>
            Invokes inassignability validation rule.
            If a type of first parameter is not assignable from type of second parameter of function throwing a custom exception.
            </summary>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom(System.Type,System.Type,System.Exception)">
            <summary>
            Invokes inassignability validation rule.
            If a type of first parameter is not assignable from type of second parameter of function throwing a custom exception.
            </summary>
            <param name="checkingType">Chaeckable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom(System.Type,System.Type,System.String)">
            <summary>
            Invokes inassignability validation rule.
            If a type of first parameter is not assignable from type of second parameter of function throwing an ArgumentNullException.
            </summary>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``1(System.Type,System.Type)">
            <summary>
            Invokes inassignability validation rule.
            If a type of first parameter is not assignable from type of second parameter of function throwing a <see cref="!:TException"/>. 
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``1(System.Type,System.Type,System.String)">
            <summary>
            Invokes inassignability validation rule.
            If a type of first parameter is not assignable from type of second parameter of function throwing a <see cref="!:TException"/> with exception message. 
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotAssignableFrom``1(System.Type,System.Type,System.String,System.String)">
            <summary>
            Invokes inassignability validation rule.
            If a type of first parameter is not assignable from type of second parameter of function throwing a <see cref="!:TException"/> with exception message and with inner exception ArgumentNullException. 
            </summary>
            <typeparam name="TException">Type of exception to throw</typeparam>
            <param name="checkingType">Checkable type</param>
            <param name="typeToCheckFor">Type to check with</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``1(``0,``0)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an ArgumentException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an ArgumentException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="right">Value of object to validate</param>
            <param name="left">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``1(``0,``0,System.Exception)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Exception)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="right">Value of object to validate</param>
            <param name="left">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``1(``0,``0,System.String)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an ArgumentNullException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an ArgumentNullException exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``2(``0,``0)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing a <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``2(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="right">Value of object to validate</param>
            <param name="left">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``2(``0,``0,System.String)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``2(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``2(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an <see cref="!:TException"/> exception and with inner exception ArgumentNullException and with exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstInequalityOfValues``2(``0,``0,System.String,System.String)">
            <summary>
            Invokes inequality validation rule.
            If objects are not equals throwing an <see cref="!:TException"/> exception and with inner exception ArgumentNullException and with exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="left">Value of object to validate</param>
            <param name="right">Value of object to validate</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference(System.Object,System.Exception)">
            <summary>
            Invokes null reference validation rule and if the rule is not valid will throw custom exception.
            </summary>
            <param name="value">The value to check</param>
            <param name="exception">Custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference(System.Object,System.String)">
            <summary>
            Invokes null reference validation rule on a method parameter.
            If a parameter value is not valid a ArgumentNullException will be thrown.
            </summary>
            <param name="value">A method parameter value to check</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference(System.Object)">
            <summary>
            Invokes null reference validation rule on an object.
            If a value is null an NullReferenceException will be thrown.
            </summary>
            <param name="value">The value to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference``1(System.Object)">
            <summary>
            Invokes null reference validation rule on an object.
            If a value is null an <see cref="!:T"/> will be thrown.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The value to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference``1(System.Object,System.String)">
            <summary>
            Invokes null reference validation rule on an object.
            If a value is null an <see cref="!:T"/> will be thrown.
            </summary>
            <param name="value">The value to check</param>
            <param name="message">The exception message</param>
            <typeparam name="T">The type of exception to throw</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference``1(System.Object,System.String,System.String)">
            <summary>
            Invokes null reference validation rule on an object.
            If a value is null an <see cref="!:T"/> will be thrown with <see cref="T:System.ArgumentNullException"/> as inner.
            </summary>
            <param name="value">The value to check</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">The exception message</param>
            <typeparam name="T">The type of exception to throw</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNullReference``1(System.Object,System.String,System.Exception)">
            <summary>
            Invokes null reference validation rule on an object.
            If a value is null an <see cref="!:T"/> will be thrown with <see cref="T:System.Exception"/> as inner.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The value to check</param>
            <param name="message">The exception message</param>
            <param name="exception">The type of exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyStringOrNull(System.String,System.Exception)">
            <summary>
            Invokes string is null or empty validation rule.
            If a value is empty string or contains null reference a custom exception will be thrown.
            </summary>
            <param name="value">The string value to validate</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyStringOrNull(System.String,System.String)">
            <summary>
            Invokes string is null or empty validation rule on a method parameter.
            If a value is empty or contains null reference a ArgumentNullException will be thrown.
            </summary>
            <param name="value">A method parameter value to validate</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstEmptyStringOrNull(System.String)">
            <summary>
            Invokes a string is null or empty validation rule.
            If a value is empty or contains null reference a NullReferenceException will be thrown.
            </summary>
            <param name="value">The string value to validat</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``1(``0,``0,``0)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range thrwowing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing an ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``1(``0,``0,``0,System.Exception)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.Exception)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Right border of range</param>
            <param name="rightBorder">Left border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Right border of range</param>
            <param name="rightBorder">Left border of range</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``2(``0,``0,``0)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to validate</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``2(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a <see cref="!:TException"/> exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to validate</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Cmparer for objects</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``2(``0,``0,``0,System.String)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right vorder of range</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``2(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a <see cref="!:TException"/> exception and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``2(``0,``0,``0,System.String,System.String)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a <see cref="!:TException"/> exception, with inner exception ArgumentNullException and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsNotInRange``2(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.String)">
            <summary>
            Invokes value is not in range validation rule.
            If value is not in range throwing a <see cref="!:TException"/> exception, with inner exception ArgumentNullException and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="value">Value of object to check</param>
            <param name="leftBorder">Left border of range</param>
            <param name="rightBorder">Right border of range</param>
            <param name="comparer">Comparer for objects</param>
            <param name="parameterName">A metjod parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing ArgumentException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Exception)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a custom exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing an ArgumentNullException.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a <see cref="!:TException"/>.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a <see cref="!:TException"/>.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a <see cref="!:TException"/> and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a <see cref="!:TException"/> and exception message.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="comparer">A comparer to use</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a <see cref="!:TException"/>, exception message and inner exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to check</param>
            <param name="secondCollection">Collection to check</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsConsequentiallyEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            /// Invokes collection consequentially equality validation rule.
            If collections are consequentially equals to each other throwing a <see cref="!:TException"/>, exception message and inner exception.
            </summary>
            <typeparam name="TValue">Type of object</typeparam>
            <typeparam name="TException">Type of exception</typeparam>
            <param name="firstCollection">Collection to chec</param>
            <param name="secondCollection">Collection to chec</param>
            <param name="comparer">A comparer to use</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">An exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue(System.Boolean,System.Exception)">
            <summary>
            Invokes true validation rule.
            If boolean value is true throwing a custom exception.
            </summary>
            <param name="value">The boolean value to validate</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue(System.Boolean,System.String)">
            <summary>
            Invokes true validation rule.
            If boolean value is true throwing a ArgumentNullException exception.
            </summary>
            <param name="value">The boolean value to validate</param>
            <param name="parameterName">A method parameter name</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue(System.Boolean)">
            <summary>
            Invokes true validation rule.
            If boolean value is true throwing ArgumentException exception.
            </summary>
            <param name="value">The boolean value to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue``1(System.Boolean)">
            <summary>
            Invokes true validation rule.
            If boolean value is true an <see cref="!:T"/> will be thrown.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue``1(System.Boolean,System.String)">
            <summary>
            Invokes true validation rule.
            If boolean value is true an <see cref="!:T"/> will be thrown.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue``1(System.Boolean,System.String,System.String)">
            <summary>
            Invokes true validation rule.
            If a value is true an <see cref="!:T"/> will be thrown with <see cref="T:System.ArgumentNullException"/> as inner.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
            <param name="parameterName">A method parameter name</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstIsTrue``1(System.Boolean,System.String,System.Exception)">
            <summary>
            Invokes true validation rule.
            If value is true a <see cref="!:T"/> will be thrown with <see cref="T:System.Exception"/> as inner.
            </summary>
            <typeparam name="T">The type of exception to throw</typeparam>
            <param name="value">The boolean value to validate</param>
            <param name="message">The exception message</param>
            <param name="exception">A custom exception to throw</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNotOfType``1(System.Object)">
            <summary>
            Invokes value is not of type validation rule.
            If value is not in range thrwowing an <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type to check to be assignable from</typeparam>
            <param name="valueToCheck">An instance to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNotOfType``1(System.Object,System.String)">
            <summary>
            Invokes value is not of type validation rule.
            If value is not in range thrwowing an <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type to check to be assignable from</typeparam>
            <param name="valueToCheck">An instance to check</param>
            <param name="parameterName">The name of parmeter to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNotOfType``1(System.Object,System.String,System.String)">
            <summary>
            Invokes value is not of type validation rule.
            If value is not in range thrwowing an <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type to check to be assignable from</typeparam>
            <param name="valueToCheck">An instance to check</param>
            <param name="message">A message to inject to exception</param>
            <param name="parameterName">The name of parameter to validate</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNotOfType``2(System.Object)">
            <summary>
            Invokes value is not of type validation rule.
            If value is not in range thrwowing an <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type to check to be assignable from</typeparam>
            <typeparam name="TException">The type of exception to throw</typeparam>
            <param name="valueToCheck">An instance to check</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNotOfType``2(System.Object,System.String)">
            <summary>
            Invokes value is not of type validation rule.
            If value is not in range thrwowing an <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type to check to be assignable from</typeparam>
            <typeparam name="TException">The type of exception to throw</typeparam>
            <param name="valueToCheck">An instance to check</param>
            <param name="message">A message to inject to exception</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.Guard.AgainstNotOfType``2(System.Object,System.String,System.Exception)">
            <summary>
            Invokes value is not of type validation rule.
            If value is not in range thrwowing an <see cref="T:System.ArgumentException"/>.
            </summary>
            <typeparam name="T">The type to check to be assignable from</typeparam>
            <typeparam name="TException">The type of exception to throw</typeparam>
            <param name="valueToCheck">An instance to check</param>
            <param name="message">A message to inject to exception</param>
            <param name="innerException">An instance of inner exception</param>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2">
            <summary>
            Exposes begin validation rule builder functionality.
            It is used to provide an ability to set custom validation specification.
            </summary>
            <typeparam name="TEntity">The type of entity which property is going to be validated</typeparam>
            <typeparam name="TProperty">The property of <see cref="!:TEntity"/> to validate</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2.And">
            <summary>
            Aggregates a validation rule into a sequence of rules that are joined with 'And' operation
            </summary>
            <returns>An instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2"/> that begins validation rule builder functionality</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2.Custom(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`1})">
            <summary>
            Sets a custom validation specification
            </summary>
            <param name="validationRule">A specification to use as validation rule</param>
            <returns>An instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2"/> that is used to mark the validation rule as closing</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2.WithMessage(System.String)">
            <summary>
            Sets a message that will be associated with a faild validation 
            </summary>
            <param name="message">The message to associate with failed validation rule result</param>
            <returns>An instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2"/> that begins validation rule builder functionality</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.Builders.RuleBuilder`2">
            <summary>
            Represents a simple validation rule builder
            </summary>
            <typeparam name="TEntity">The type of entity which property is going to be validated</typeparam>
            <typeparam name="TProperty">The property of <see cref="!:TEntity"/> to validate</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.RuleBuilder`2.#ctor(YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule{`0,`1})">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.RuleBuilder`2"/>
            </summary>
            <param name="propertyRule">A property validation rule to build</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.RuleBuilder`2.And">
            <summary>
            Aggregates a validation rule into a sequence of rules that are joined with 'And' operation
            </summary>
            <returns>An instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2"/> that begins validation rule builder functionality</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.RuleBuilder`2.WithMessage(System.String)">
            <summary>
            Sets a message that will be associated with a faild validation 
            </summary>
            <param name="message">The message to associate with failed validation rule result</param>
            <returns>An instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2"/> that begins validation rule builder functionality</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Builders.RuleBuilder`2.Custom(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`1})">
            <summary>
            Sets a custom validation specification
            </summary>
            <param name="validationRule">A specification to use as validation rule</param>
            <returns>An instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder`2"/> that is used to mark the validation rule as closing</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.FluentValidation">
            <summary>
            Represents a basic fluent validation interface
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.FluentValidation.NotNull``2(YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder{``0,``1})">
            <summary>
            Sets a not null validation rule
            </summary>
            <param name="ruleBuilder">The rule builder to use</param>
            <typeparam name="TInstance">The type of instance to connect the rule to</typeparam>
            <typeparam name="TProperty">The type of property to attach validation the rule to</typeparam>
            <returns>An instance of a validation rule builder</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.FluentValidation.NotNullOrNotEmpty``1(YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder{``0,System.String})">
            <summary>
            Sets a not null or not empty validation rule
            </summary>
            <param name="ruleBuilder">The rule builder to use</param>
            <typeparam name="TInstance">The type of instance to connect the rule to</typeparam>
            <returns>An instance of a validation rule builder</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.FluentValidation.MatchRegex``1(YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder{``0,System.String},System.String)">
            <summary>
            Sets a rule that depends on regex result
            </summary>
            <param name="ruleBuilder">The rule builder to use</param>
            <typeparam name="TInstance">The type of instance to connect the rule to</typeparam>
            <param name="pattern">The pattern to use in regex</param>
            <returns>An instance of a validation rule builder</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.FluentValidation.WithMaxLength``1(YP.Toolkit.System.Validation.ValidationRules.Builders.IRuleBuilder{``0,System.String},System.Int32)">
            <summary>
            Sets a rule taht checks for string maximum length value
            </summary>
            <typeparam name="TInstance">The type of instance to connect the rule to</typeparam>
            <param name="ruleBuilder">The rule builder to use</param>
            <param name="length">The maximum string length</param>
            <returns>An instance of a validation rule builder</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationInAdvanced">
            <summary>
            Exposes a validation in advanced functionality
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationInAdvanced.ValidateInAdvance(System.Object)">
            <summary>
            Validates a value as if it is a value of a property
            </summary>
            <param name="value">The value to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationInAdvanced`1">
            <summary>
            Exposes a validation in advanced functionality
            </summary>
            <typeparam name="TValue">The type of a property's value </typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationInAdvanced`1.ValidateInAdvance(`0)">
            <summary>
            Validates a value as if it is a value of a property
            </summary>
            <param name="value">The value to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule">
            <summary>
            Exposes validation rule functionality
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule.ForInstanceType">
            <summary>
            Gets a type of an instance that contains a property to validate
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule.ForInstancePropertyWithName">
            <summary>
            Gets the name of a property that should be validated
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule.PropertyType">
            <summary>
            Gets the type of property value to validate
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule.Validate(System.Object)">
            <summary>
            Validates a value of a property
            </summary>
            <param name="value">The value of a property to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule`1">
            <summary>
            Exposes validation rule functionality
            </summary>
            <typeparam name="TInstance">The type of an instance that cantains the property to validate</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRule`1.Validate(`0)">
            <summary>
            Validates a property value of an instance of <see cref="!:TInstance"/>
            </summary>
            <param name="value">The instance to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRuleSetter`1">
            <summary>
            Exposes a validation rule setter
            </summary>
            <typeparam name="TProperty">The type of property to validate</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRuleSetter`1.SetValidator(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`0})">
            <summary>
            Sets a validator for the current validation rule
            </summary>
            <param name="validator">The validation to use as a rule</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.IValidationRuleSetter`1.SetMessage(System.String)">
            <summary>
            Sets a message that will be associated with failed validation rule result information
            </summary>
            <param name="message">The message that will associated with failed validation rule result information</param>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2">
            <summary>
            Exposes a validation rule that is connected to a property of an object
            </summary>
            <typeparam name="TInstance">The type of instance that property is connected to</typeparam>
            <typeparam name="TProperty">The type of property to validate</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2"/>
            </summary>
            <param name="property">The property information to use</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.AggregateAnd">
            <summary>
            Begins to aggregate the next validation rule with 'And' operator
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.SetValidator(YP.Toolkit.System.Tools.Patterns.Specification.SpecificationBase{`1})">
            <summary>
            Sets current validator
            </summary>
            <param name="validator"></param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.SetMessage(System.String)">
            <summary>
            Sets a message to associate with current validation rule
            </summary>
            <param name="message">The message to associate with current validation rule</param>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationRule#ForInstanceType">
            <summary>
            Gets a type of an instance that contains a property to validate
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationRule#ForInstancePropertyWithName">
            <summary>
            Gets the name of a property that should be validated
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationRule#PropertyType">
            <summary>
            Gets the type of property value to validate
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationRule{TInstance}#Validate(`0)">
            <summary>
            Validates a property value of an instance of <see cref="!:TInstance"/>
            </summary>
            <param name="value">The instance to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationRule#Validate(System.Object)">
            <summary>
            Validates a value of a property
            </summary>
            <param name="value">The value of a property to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationInAdvanced{TProperty}#ValidateInAdvance(`1)">
            <summary>
            Validates a value as if it is a value of a property
            </summary>
            <param name="value">The value to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.InternalRules.PropertyRule`2.YP#Toolkit#System#Validation#ValidationRules#InternalRules#IValidationInAdvanced#ValidateInAdvance(System.Object)">
            <summary>
            Validates a value as if it is a value of a property
            </summary>
            <param name="value">The value to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.InternalRules.ValidationBlock`1">
            <summary>
            Represents a validation block information 
            that contains an associated message and a validator to use
            </summary>
            <typeparam name="TProperty">The type of property that is used in validation rule</typeparam>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.ValidationBlock`1.Message">
            <summary>
            Gets or sets a message that is associated with current validation rule
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.InternalRules.ValidationBlock`1.Validator">
            <summary>
            Gets or sets a validator to use
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.ValidationFailure">
            <summary>
            Represents a result of the validation.
            If the value is null it means that validation was succeded
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.ValidationFailure.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.ValidationFailure.ErrorMessage">
            <summary>
            Gets or sets the error message
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationFailure.#ctor(System.String,System.String)">
            <summary>
            Creaets an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.ValidationFailure"/>
            </summary>
            <param name="propertyName">The name of property that was failed while validation</param>
            <param name="errorMessage">The error message that is associated with current validation issue</param>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationFailure.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1">
            <summary>
            Represents a basic validator for <see cref="!:TInstance"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.#ctor">
            <summary>
            Initializes an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1"/>
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Configures a validation rule for a property of an instance
            </summary>
            <param name="propertyAccessor">The property to validate</param>
            <typeparam name="TInstance">The type of instance which property should be validated</typeparam>
            <typeparam name="TProperty">The type of property to validate</typeparam>
            <returns>An instance of a property validation rule builder</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.Validate(`0)">
            <summary>
            Validates an instance
            </summary>
            <param name="instance">Te instance to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.Validate(System.Object)">
            <summary>
            Validates an instance
            </summary>
            <param name="instance">The instance to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.Validate(`0,System.String)">
            <summary>
            Validates an instance
            </summary>
            <param name="instance">The instance to validate</param>
            <param name="propertyName">The name of a property to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.Validate(System.Object,System.String)">
            <summary>
            Validates an instance
            </summary>
            <param name="instance">The instance to validate</param>
            <param name="propertyName">The name of a property to validate</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.ValidateInAdvance(System.Object,System.String)">
            <summary>
            Validates an instance in advanced. It means that actual property value is not tested.
            The value is tested as if it is set to a property of <see cref="!:propertyName"/> 
            </summary>
            <param name="value">The value to validate</param>
            <param name="propertyName">The name of property</param>
            <returns>The result of validation</returns>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.ValidationBase`1.GetPropertyTypeByName(System.String)">
            <summary>
            Gets the type of a property that was previously registered in the instance validation functionality
            </summary>
            <param name="propertyName">The name of property to get type of</param>
            <returns>The type of a property to validate</returns>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullRule`1">
            <summary>
            Represents a not null validation rule
            </summary>
            <typeparam name="TProperty">The type of property to validate</typeparam>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullRule`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullRule`1"/> validation rule
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullRule`1.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullOrNotEmptyRule">
            <summary>
            Represents a not null or empty validation rule
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullOrNotEmptyRule.#ctor">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullOrNotEmptyRule"/> validation rule
            </summary>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.Validators.NotNullOrNotEmptyRule.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.Validators.RegExRule">
            <summary>
            Represents a validation rule that is based on regex
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Validators.RegExRule.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Validators.RegExRule"/>
            </summary>
            <param name="pattern">The pattern to use in regex functionality</param>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.Validators.RegExRule.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
        <member name="T:YP.Toolkit.System.Validation.ValidationRules.Validators.StringMaxLengthRule">
            <summary>
            Represents a string maximum length validation rule
            </summary>
        </member>
        <member name="M:YP.Toolkit.System.Validation.ValidationRules.Validators.StringMaxLengthRule.#ctor(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:YP.Toolkit.System.Validation.ValidationRules.Validators.StringMaxLengthRule"/>
            </summary>
            <param name="maxLength">The maximum length of a string to validate</param>
        </member>
        <member name="P:YP.Toolkit.System.Validation.ValidationRules.Validators.StringMaxLengthRule.Predicate">
            <summary>
            Gets current specification expression.
            </summary>
        </member>
    </members>
</doc>
